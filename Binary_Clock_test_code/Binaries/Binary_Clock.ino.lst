
/tmp/arduino_build_412373/Binary_Clock.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	4d c0       	rjmp	.+154    	; 0x9e <__bad_interrupt>
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	4b c0       	rjmp	.+150    	; 0x9e <__bad_interrupt>
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	49 c0       	rjmp	.+146    	; 0x9e <__bad_interrupt>
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	47 c0       	rjmp	.+142    	; 0x9e <__bad_interrupt>
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	45 c0       	rjmp	.+138    	; 0x9e <__bad_interrupt>
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	a5 c3       	rjmp	.+1866   	; 0x762 <__vector_11>
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	41 c0       	rjmp	.+130    	; 0x9e <__bad_interrupt>
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	65 c4       	rjmp	.+2250   	; 0x8ea <__vector_15>
  20:	ea c3       	rjmp	.+2004   	; 0x7f6 <__vector_16>

00000022 <__trampolines_end>:
__trampolines_start():
  22:	00 00       	nop
  24:	3a 00       	.word	0x003a	; ????
  26:	37 00       	.word	0x0037	; ????

00000028 <port_to_output_PGM>:
  28:	00 00 3b 00 38 00                                   ..;.8.

0000002e <digital_pin_to_port_PGM>:
  2e:	01 01 01 01 01 01 01 01 02 02 02 02                 ............

0000003a <digital_pin_to_bit_mask_PGM>:
  3a:	01 02 04 08 10 20 40 80 04 02 01 08                 ..... @.....

00000046 <digital_pin_to_timer_PGM>:
  46:	00 00 00 00 00 04 03 02 01 00 00 00                 ............

00000052 <__ctors_start>:
__ctors_start():
  52:	8f 05       	cpc	r24, r15

00000054 <__ctors_end>:
__dtors_end():
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d2 e0       	ldi	r29, 0x02	; 2
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  60:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  62:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  64:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  66:	e4 e4       	ldi	r30, 0x44	; 68
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  68:	fc e0       	ldi	r31, 0x0C	; 12
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  6c:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  6e:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  70:	aa 36       	cpi	r26, 0x6A	; 106
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  72:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  76:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  78:	aa e6       	ldi	r26, 0x6A	; 106
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  7a:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  80:	ad 3b       	cpi	r26, 0xBD	; 189
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  82:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  86:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  88:	ca e2       	ldi	r28, 0x2A	; 42
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  8a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  8c:	03 c0       	rjmp	.+6      	; 0x94 <__do_global_ctors+0xe>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  8e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  90:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  92:	d0 d5       	rcall	.+2976   	; 0xc34 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  94:	c9 32       	cpi	r28, 0x29	; 41
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  96:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
  98:	d1 f7       	brne	.-12     	; 0x8e <__do_global_ctors+0x8>
  9a:	40 d4       	rcall	.+2176   	; 0x91c <main>
  9c:	d1 c5       	rjmp	.+2978   	; 0xc40 <_exit>

0000009e <__bad_interrupt>:
__vector_1():
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <TwoWire::read() [clone .constprop.14]>:
_ZN7TwoWire4readEv.constprop.14():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:542

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
  a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <TwoWire::BufferLength>
  a4:	88 23       	and	r24, r24
  a6:	39 f0       	breq	.+14     	; 0xb6 <TwoWire::read() [clone .constprop.14]+0x16>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:543
    return BufferLength - BufferIndex;
  a8:	20 91 bb 00 	lds	r18, 0x00BB	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:556
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
  ac:	82 13       	cpse	r24, r18
  ae:	1c c0       	rjmp	.+56     	; 0xe8 <TwoWire::read() [clone .constprop.14]+0x48>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:553

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	9f ef       	ldi	r25, 0xFF	; 255
  b4:	08 95       	ret
USI_TWI_Data_In_Receive_Buffer():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
  b6:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <TWI_RxTail>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
  ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <TWI_RxHead>
  be:	89 1b       	sub	r24, r25
  c0:	8f 70       	andi	r24, 0x0F	; 15
_ZN7TwoWire4readEv.constprop.14():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:556

  // get each successive byte on each call
  if (available()) {
  c2:	b1 f3       	breq	.-20     	; 0xb0 <TwoWire::read() [clone .constprop.14]+0x10>
USI_TWI_Receive_Byte():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
  c4:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <TWI_RxTail>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
  c8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <TWI_RxHead>
  cc:	98 17       	cp	r25, r24
  ce:	e1 f3       	breq	.-8      	; 0xc8 <TwoWire::read() [clone .constprop.14]+0x28>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
  d0:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <TWI_RxTail>
  d4:	ef 5f       	subi	r30, 0xFF	; 255
  d6:	ef 70       	andi	r30, 0x0F	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
  d8:	e0 93 ba 00 	sts	0x00BA, r30	; 0x8000ba <TWI_RxTail>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	e6 59       	subi	r30, 0x96	; 150
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
_ZN7TwoWire4readEv.constprop.14():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:561
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
  e2:	80 81       	ld	r24, Z
  e4:	90 e0       	ldi	r25, 0x00	; 0
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:566
    }
  }

  return value;
}
  e6:	08 95       	ret
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:558
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
  e8:	e2 2f       	mov	r30, r18
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	e6 59       	subi	r30, 0x96	; 150
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	90 e0       	ldi	r25, 0x00	; 0
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:559
      ++BufferIndex;
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	20 93 bb 00 	sts	0x00BB, r18	; 0x8000bb <TwoWire::BufferIndex>
  fa:	08 95       	ret

000000fc <TwoWire::write(unsigned char) [clone .constprop.13]>:
_ZN7TwoWire5writeEh.constprop.13():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:498

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
  fc:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <TwoWire::transmitting>
 100:	99 23       	and	r25, r25
 102:	a1 f0       	breq	.+40     	; 0x12c <TwoWire::write(unsigned char) [clone .constprop.13]+0x30>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:500
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
 104:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <TwoWire::BufferLength>
 108:	90 32       	cpi	r25, 0x20	; 32
 10a:	40 f5       	brcc	.+80     	; 0x15c <TwoWire::write(unsigned char) [clone .constprop.13]+0x60>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:504
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
 10c:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <TwoWire::BufferIndex>
 110:	e9 2f       	mov	r30, r25
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	e6 59       	subi	r30, 0x96	; 150
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	80 83       	st	Z, r24
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:505
    ++BufferIndex;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	89 0f       	add	r24, r25
 11e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:507
    // update amount in buffer
    BufferLength = BufferIndex;
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <TwoWire::BufferLength>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:516
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
USI_TWI_Space_In_Transmission_Buffer():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
 12c:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <TWI_TxHead>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
 130:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <TWI_TxTail>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
 134:	2f 5f       	subi	r18, 0xFF	; 255
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
 136:	92 1b       	sub	r25, r18
 138:	9f 70       	andi	r25, 0x0F	; 15
_ZN7TwoWire5writeEh.constprop.13():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:510
    ++BufferIndex;
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
 13a:	81 f0       	breq	.+32     	; 0x15c <TwoWire::write(unsigned char) [clone .constprop.13]+0x60>
USI_TWI_Transmit_Byte():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
 13c:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <TWI_TxHead>
 140:	9f 5f       	subi	r25, 0xFF	; 255
 142:	9f 70       	andi	r25, 0x0F	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
 144:	20 91 b6 00 	lds	r18, 0x00B6	; 0x8000b6 <TWI_TxTail>
 148:	92 17       	cp	r25, r18
 14a:	e1 f3       	breq	.-8      	; 0x144 <TwoWire::write(unsigned char) [clone .constprop.13]+0x48>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
 14c:	e9 2f       	mov	r30, r25
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	e6 58       	subi	r30, 0x86	; 134
 152:	ff 4f       	sbci	r31, 0xFF	; 255
 154:	80 83       	st	Z, r24
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
 156:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <TWI_TxHead>
 15a:	e5 cf       	rjmp	.-54     	; 0x126 <TwoWire::write(unsigned char) [clone .constprop.13]+0x2a>
_ZN7TwoWire5writeEh.constprop.13():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:501
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
      return 0;
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:517
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
}
 160:	08 95       	ret

00000162 <digitalWrite>:
digitalWrite():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:138

}

void digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
 162:	87 fd       	sbrc	r24, 7
 164:	8f 77       	andi	r24, 0x7F	; 127
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:139
  uint8_t timer = digitalPinToTimer(pin);
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	fc 01       	movw	r30, r24
 16a:	ea 5b       	subi	r30, 0xBA	; 186
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	34 91       	lpm	r19, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:140
  uint8_t bit = digitalPinToBitMask(pin);
 170:	fc 01       	movw	r30, r24
 172:	e6 5c       	subi	r30, 0xC6	; 198
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	24 91       	lpm	r18, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:141
  uint8_t port = digitalPinToPort(pin);
 178:	fc 01       	movw	r30, r24
 17a:	e2 5d       	subi	r30, 0xD2	; 210
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	e4 91       	lpm	r30, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:144
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 180:	ee 23       	and	r30, r30
 182:	b9 f0       	breq	.+46     	; 0x1b2 <digitalWrite+0x50>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:148

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 184:	33 23       	and	r19, r19
 186:	29 f0       	breq	.+10     	; 0x192 <digitalWrite+0x30>
turnOffPWM():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
  #if defined(TCCR0A) && defined(COM0A1)
  if( timer == TIMER0A){
 188:	31 30       	cpi	r19, 0x01	; 1
 18a:	a1 f4       	brne	.+40     	; 0x1b4 <digitalWrite+0x52>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:68
    cbi(TCCR0A, COM0A1);
 18c:	80 b7       	in	r24, 0x30	; 48
 18e:	8f 77       	andi	r24, 0x7F	; 127
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:75
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
    cbi(TCCR0A, COM0B1);
 190:	80 bf       	out	0x30, r24	; 48
digitalWrite():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:150

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e8 5d       	subi	r30, 0xD8	; 216
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	a5 91       	lpm	r26, Z+
 19e:	b4 91       	lpm	r27, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:153

  if (val == LOW) {
    uint8_t oldSREG = SREG;
 1a0:	8f b7       	in	r24, 0x3f	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:152
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);

  if (val == LOW) {
 1a2:	61 11       	cpse	r22, r1
 1a4:	17 c0       	rjmp	.+46     	; 0x1d4 <digitalWrite+0x72>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:154
    uint8_t oldSREG = SREG;
    cli();
 1a6:	f8 94       	cli
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:155
    *out &= ~bit;
 1a8:	ec 91       	ld	r30, X
 1aa:	20 95       	com	r18
 1ac:	2e 23       	and	r18, r30
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:160
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
 1ae:	2c 93       	st	X, r18
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:161
    SREG = oldSREG;
 1b0:	8f bf       	out	0x3f, r24	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:163
  }
}
 1b2:	08 95       	ret
turnOffPWM():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:74
    //cbi(TCCR0A, COM0A0);
  } else
  #endif

  #if defined(TCCR0A) && defined(COM0B1)
  if( timer == TIMER0B){
 1b4:	32 30       	cpi	r19, 0x02	; 2
 1b6:	19 f4       	brne	.+6      	; 0x1be <digitalWrite+0x5c>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:75
    cbi(TCCR0A, COM0B1);
 1b8:	80 b7       	in	r24, 0x30	; 48
 1ba:	8f 7d       	andi	r24, 0xDF	; 223
 1bc:	e9 cf       	rjmp	.-46     	; 0x190 <digitalWrite+0x2e>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:81
    //cbi(TCCR0A, COM0B0);
  } else
  #endif

  #if defined(TCCR1A) && defined(COM1A1)
  if( timer == TIMER1A){
 1be:	33 30       	cpi	r19, 0x03	; 3
 1c0:	21 f4       	brne	.+8      	; 0x1ca <digitalWrite+0x68>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:82
    cbi(TCCR1A, COM1A1);
 1c2:	8f b5       	in	r24, 0x2f	; 47
 1c4:	8f 77       	andi	r24, 0x7F	; 127
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:116
  } else
  #endif

  #if defined(TCCR1A) && defined(COM1B1)
  if( timer == TIMER1B){
    cbi(TCCR1A, COM1B1);
 1c6:	8f bd       	out	0x2f, r24	; 47
 1c8:	e4 cf       	rjmp	.-56     	; 0x192 <digitalWrite+0x30>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:115
  #endif
  } else
  #endif

  #if defined(TCCR1A) && defined(COM1B1)
  if( timer == TIMER1B){
 1ca:	34 30       	cpi	r19, 0x04	; 4
 1cc:	11 f7       	brne	.-60     	; 0x192 <digitalWrite+0x30>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:116
    cbi(TCCR1A, COM1B1);
 1ce:	8f b5       	in	r24, 0x2f	; 47
 1d0:	8f 7d       	andi	r24, 0xDF	; 223
 1d2:	f9 cf       	rjmp	.-14     	; 0x1c6 <digitalWrite+0x64>
digitalWrite():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:159
    cli();
    *out &= ~bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
 1d4:	f8 94       	cli
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:160
    *out |= bit;
 1d6:	ec 91       	ld	r30, X
 1d8:	2e 2b       	or	r18, r30
 1da:	e9 cf       	rjmp	.-46     	; 0x1ae <digitalWrite+0x4c>

000001dc <pinMode>:
pinMode():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:34
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
 1e0:	87 fd       	sbrc	r24, 7
 1e2:	8f 77       	andi	r24, 0x7F	; 127
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:35
  uint8_t bit = digitalPinToBitMask(pin);
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	e6 5c       	subi	r30, 0xC6	; 198
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	24 91       	lpm	r18, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
 1ee:	82 5d       	subi	r24, 0xD2	; 210
 1f0:	9f 4f       	sbci	r25, 0xFF	; 255
 1f2:	fc 01       	movw	r30, r24
 1f4:	84 91       	lpm	r24, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:39
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 1f6:	88 23       	and	r24, r24
 1f8:	d1 f0       	breq	.+52     	; 0x22e <pinMode+0x52>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:41

  reg = portModeRegister(port);
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	fc 01       	movw	r30, r24
 202:	ee 5d       	subi	r30, 0xDE	; 222
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	a5 91       	lpm	r26, Z+
 208:	b4 91       	lpm	r27, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:42
  out = portOutputRegister(port);
 20a:	fc 01       	movw	r30, r24
 20c:	e8 5d       	subi	r30, 0xD8	; 216
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	c5 91       	lpm	r28, Z+
 212:	d4 91       	lpm	r29, Z
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:44

  if (mode == INPUT) {
 214:	61 11       	cpse	r22, r1
 216:	0e c0       	rjmp	.+28     	; 0x234 <pinMode+0x58>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:45
    uint8_t oldSREG = SREG;
 218:	9f b7       	in	r25, 0x3f	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:46
                cli();
 21a:	f8 94       	cli
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:47
    *reg &= ~bit;
 21c:	8c 91       	ld	r24, X
 21e:	e2 2f       	mov	r30, r18
 220:	e0 95       	com	r30
 222:	8e 23       	and	r24, r30
 224:	8c 93       	st	X, r24
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:48
    *out &= ~bit;
 226:	28 81       	ld	r18, Y
 228:	e2 23       	and	r30, r18
 22a:	e8 83       	st	Y, r30
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:49
    SREG = oldSREG;
 22c:	9f bf       	out	0x3f, r25	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:62
    uint8_t oldSREG = SREG;
                cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:57
                cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 234:	8f b7       	in	r24, 0x3f	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:58
                cli();
 236:	f8 94       	cli
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:59
    *reg |= bit;
 238:	ec 91       	ld	r30, X
 23a:	e2 2b       	or	r30, r18
 23c:	ec 93       	st	X, r30
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring_digital.c:60
    SREG = oldSREG;
 23e:	8f bf       	out	0x3f, r24	; 63
 240:	f6 cf       	rjmp	.-20     	; 0x22e <pinMode+0x52>

00000242 <micros>:
micros():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:190
}

unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
 242:	3f b7       	in	r19, 0x3f	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:192

  cli();
 244:	f8 94       	cli
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:193
  m = millis_timer_overflow_count;
 246:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <millis_timer_overflow_count>
 24a:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <millis_timer_overflow_count+0x1>
 24e:	a0 91 b0 00 	lds	r26, 0x00B0	; 0x8000b0 <millis_timer_overflow_count+0x2>
 252:	b0 91 b1 00 	lds	r27, 0x00B1	; 0x8000b1 <millis_timer_overflow_count+0x3>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:195
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
 256:	22 b7       	in	r18, 0x32	; 50
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:207
#else
  #error Millis()/Micros() timer not defined
#endif

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
 258:	08 b6       	in	r0, 0x38	; 56
 25a:	00 fe       	sbrs	r0, 0
 25c:	05 c0       	rjmp	.+10     	; 0x268 <__stack+0x9>
 25e:	2f 3f       	cpi	r18, 0xFF	; 255
 260:	19 f0       	breq	.+6      	; 0x268 <__stack+0x9>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:208
    m++;
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	a1 1d       	adc	r26, r1
 266:	b1 1d       	adc	r27, r1
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:220
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
 268:	3f bf       	out	0x3f, r19	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:227

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
 26a:	ba 2f       	mov	r27, r26
 26c:	a9 2f       	mov	r26, r25
 26e:	98 2f       	mov	r25, r24
 270:	88 27       	eor	r24, r24
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	62 0f       	add	r22, r18
 278:	71 1d       	adc	r23, r1
 27a:	81 1d       	adc	r24, r1
 27c:	91 1d       	adc	r25, r1
 27e:	43 e0       	ldi	r20, 0x03	; 3
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	4a 95       	dec	r20
 28a:	d1 f7       	brne	.-12     	; 0x280 <__stack+0x21>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:270
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
 28c:	08 95       	ret

0000028e <delay>:
delay():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:280
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
 28e:	cf 92       	push	r12
 290:	df 92       	push	r13
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	6b 01       	movw	r12, r22
 29c:	7c 01       	movw	r14, r24
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:282
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
 29e:	d1 df       	rcall	.-94     	; 0x242 <micros>
 2a0:	eb 01       	movw	r28, r22
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:286

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
 2a2:	cf df       	rcall	.-98     	; 0x242 <micros>
 2a4:	6c 1b       	sub	r22, r28
 2a6:	7d 0b       	sbc	r23, r29
 2a8:	68 3e       	cpi	r22, 0xE8	; 232
 2aa:	73 40       	sbci	r23, 0x03	; 3
 2ac:	a0 f0       	brcs	.+40     	; 0x2d6 <delay+0x48>
 2ae:	c1 14       	cp	r12, r1
 2b0:	d1 04       	cpc	r13, r1
 2b2:	e1 04       	cpc	r14, r1
 2b4:	f1 04       	cpc	r15, r1
 2b6:	39 f4       	brne	.+14     	; 0x2c6 <delay+0x38>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:296
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	08 95       	ret
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:287
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	c8 1a       	sub	r12, r24
 2ca:	d1 08       	sbc	r13, r1
 2cc:	e1 08       	sbc	r14, r1
 2ce:	f1 08       	sbc	r15, r1
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:288
      start += 1000;
 2d0:	c8 51       	subi	r28, 0x18	; 24
 2d2:	dc 4f       	sbci	r29, 0xFC	; 252
 2d4:	e6 cf       	rjmp	.-52     	; 0x2a2 <delay+0x14>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:284
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
 2d6:	c1 14       	cp	r12, r1
 2d8:	d1 04       	cpc	r13, r1
 2da:	e1 04       	cpc	r14, r1
 2dc:	f1 04       	cpc	r15, r1
 2de:	09 f7       	brne	.-62     	; 0x2a2 <delay+0x14>
 2e0:	eb cf       	rjmp	.-42     	; 0x2b8 <delay+0x2a>

000002e2 <millis>:
millis():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:176
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
 2e2:	2f b7       	in	r18, 0x3f	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:180

  // disable interrupts while we read millis_timer_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
  cli();
 2e4:	f8 94       	cli
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:181
  m = millis_timer_millis;
 2e6:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <millis_timer_millis>
 2ea:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <millis_timer_millis+0x1>
 2ee:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <millis_timer_millis+0x2>
 2f2:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <millis_timer_millis+0x3>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:182
  SREG = oldSREG;
 2f6:	2f bf       	out	0x3f, r18	; 63
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:185

  return m;
}
 2f8:	08 95       	ret

000002fa <setPin(int, bool)>:
_Z6setPinib():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:58
    pinMode(led_pins[i], INPUT);
  }
  //Serial.println("Ha finalizado");
}
void setPin(int pin, bool state){
  DDRA |= (0X01 << pin);
 2fa:	9a b3       	in	r25, 0x1a	; 26
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	08 2e       	mov	r0, r24
 302:	01 c0       	rjmp	.+2      	; 0x306 <setPin(int, bool)+0xc>
 304:	22 0f       	add	r18, r18
 306:	0a 94       	dec	r0
 308:	ea f7       	brpl	.-6      	; 0x304 <setPin(int, bool)+0xa>
 30a:	92 2b       	or	r25, r18
 30c:	9a bb       	out	0x1a, r25	; 26
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:59
  PORTA |= (state << pin);
 30e:	9b b3       	in	r25, 0x1b	; 27
 310:	01 c0       	rjmp	.+2      	; 0x314 <setPin(int, bool)+0x1a>
 312:	66 0f       	add	r22, r22
 314:	8a 95       	dec	r24
 316:	ea f7       	brpl	.-6      	; 0x312 <setPin(int, bool)+0x18>
 318:	69 2b       	or	r22, r25
 31a:	6b bb       	out	0x1b, r22	; 27
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:60
}
 31c:	08 95       	ret

0000031e <printHoras(int, int*, bool, bool)>:
_Z10printHorasiPibb():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:61
void printHoras(int numero, int* pines, bool not_minutes, bool horas){
 31e:	2f 92       	push	r2
 320:	3f 92       	push	r3
 322:	4f 92       	push	r4
 324:	5f 92       	push	r5
 326:	6f 92       	push	r6
 328:	7f 92       	push	r7
 32a:	8f 92       	push	r8
 32c:	9f 92       	push	r9
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	00 d0       	rcall	.+0      	; 0x344 <printHoras(int, int*, bool, bool)+0x26>
 344:	00 d0       	rcall	.+0      	; 0x346 <printHoras(int, int*, bool, bool)+0x28>
 346:	00 d0       	rcall	.+0      	; 0x348 <printHoras(int, int*, bool, bool)+0x2a>
 348:	1f 92       	push	r1
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	4b 01       	movw	r8, r22
 350:	4a 83       	std	Y+2, r20	; 0x02
 352:	29 83       	std	Y+1, r18	; 0x01
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:63
  //El booleano not_minutes se usa en el 3 led del segundo segmento, para determinar que lado de los 2 es (Minutos o segundos)
  byte primer_digito = numero%10; //Guardamos el primer digito
 354:	6a e0       	ldi	r22, 0x0A	; 10
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	24 d4       	rcall	.+2120   	; 0xba2 <__divmodhi4>
 35a:	5b 01       	movw	r10, r22
 35c:	6c 01       	movw	r12, r24
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:67
  byte segundo_digito = numero/10;//Guardamos el segundo digito
  //pines=Agrupacion_M;//Minutos_pins;
  int length = 5;//(sizeof(pines)/sizeof(pines[0]))-1;//5;//sizeof(pines);
  if(horas) length=2;
 35e:	21 11       	cpse	r18, r1
 360:	af c0       	rjmp	.+350    	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:66
void printHoras(int numero, int* pines, bool not_minutes, bool horas){
  //El booleano not_minutes se usa en el 3 led del segundo segmento, para determinar que lado de los 2 es (Minutos o segundos)
  byte primer_digito = numero%10; //Guardamos el primer digito
  byte segundo_digito = numero/10;//Guardamos el segundo digito
  //pines=Agrupacion_M;//Minutos_pins;
  int length = 5;//(sizeof(pines)/sizeof(pines[0]))-1;//5;//sizeof(pines);
 362:	25 e0       	ldi	r18, 0x05	; 5
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	3c 83       	std	Y+4, r19	; 0x04
 368:	2b 83       	std	Y+3, r18	; 0x03
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:71
  if(horas) length=2;
  //Serial.println(String("Numero: ")+numero);
  for(int i=0; i<4; i++){
    if((primer_digito>>i)&0x01){
      pinMode(pines[length], OUTPUT); //Lo pongo en en OUTPUT, porque esta seccion del segmento sera la que manejemos prmero.
 36a:	eb 81       	ldd	r30, Y+3	; 0x03
 36c:	fc 81       	ldd	r31, Y+4	; 0x04
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	ff 83       	std	Y+7, r31	; 0x07
 374:	ee 83       	std	Y+6, r30	; 0x06
 376:	1f 01       	movw	r2, r30
 378:	28 0c       	add	r2, r8
 37a:	39 1c       	adc	r3, r9
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:94
        case 2:
          /*digitalWrite(pines[length], HIGH);
          pinMode(pines[length-2], OUTPUT);
          digitalWrite(pines[length-2], LOW);*/
          setPin(pines[length], 1);
          setPin(pines[length-2], 0);
 37c:	3f 01       	movw	r6, r30
 37e:	f4 e0       	ldi	r31, 0x04	; 4
 380:	6f 1a       	sub	r6, r31
 382:	71 08       	sbc	r7, r1
 384:	68 0c       	add	r6, r8
 386:	79 1c       	adc	r7, r9
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:87
        case 1:
          /*digitalWrite(pines[length], LOW);
          pinMode(pines[length-1], OUTPUT);
          digitalWrite(pines[length-1], HIGH);*/
          setPin(pines[length], 0);
          setPin(pines[length-1], 1);
 388:	4e 80       	ldd	r4, Y+6	; 0x06
 38a:	5f 80       	ldd	r5, Y+7	; 0x07
 38c:	22 e0       	ldi	r18, 0x02	; 2
 38e:	42 1a       	sub	r4, r18
 390:	51 08       	sbc	r5, r1
 392:	48 0c       	add	r4, r8
 394:	59 1c       	adc	r5, r9
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:148
        case 2:
          /*pinMode(pines[length-4], OUTPUT);
          pinMode(pines[length-5], OUTPUT);
          digitalWrite(pines[length-4], not_minutes);
          digitalWrite(pines[length-5], !not_minutes);*/
          setPin(pines[length-4], not_minutes);
 396:	ee 80       	ldd	r14, Y+6	; 0x06
 398:	ff 80       	ldd	r15, Y+7	; 0x07
 39a:	38 e0       	ldi	r19, 0x08	; 8
 39c:	e3 1a       	sub	r14, r19
 39e:	f1 08       	sbc	r15, r1
 3a0:	e8 0c       	add	r14, r8
 3a2:	f9 1c       	adc	r15, r9
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:149
          setPin(pines[length-5], !not_minutes);
 3a4:	8e 81       	ldd	r24, Y+6	; 0x06
 3a6:	9f 81       	ldd	r25, Y+7	; 0x07
 3a8:	0a 97       	sbiw	r24, 0x0a	; 10
 3aa:	f4 01       	movw	r30, r8
 3ac:	e8 0f       	add	r30, r24
 3ae:	f9 1f       	adc	r31, r25
 3b0:	fc 83       	std	Y+4, r31	; 0x04
 3b2:	eb 83       	std	Y+3, r30	; 0x03
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:139
          else{
            /*pinMode(pines[length-3], OUTPUT);
            pinMode(pines[length-4], OUTPUT);
            digitalWrite(pines[length-3], HIGH);
            digitalWrite(pines[length-4], LOW);*/
            setPin(pines[length-3], 1);
 3b4:	2e 81       	ldd	r18, Y+6	; 0x06
 3b6:	3f 81       	ldd	r19, Y+7	; 0x07
 3b8:	26 50       	subi	r18, 0x06	; 6
 3ba:	31 09       	sbc	r19, r1
 3bc:	28 0d       	add	r18, r8
 3be:	39 1d       	adc	r19, r9
 3c0:	3f 83       	std	Y+7, r19	; 0x07
 3c2:	2e 83       	std	Y+6, r18	; 0x06
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:69
  byte segundo_digito = numero/10;//Guardamos el segundo digito
  //pines=Agrupacion_M;//Minutos_pins;
  int length = 5;//(sizeof(pines)/sizeof(pines[0]))-1;//5;//sizeof(pines);
  if(horas) length=2;
  //Serial.println(String("Numero: ")+numero);
  for(int i=0; i<4; i++){
 3c4:	10 e0       	ldi	r17, 0x00	; 0
 3c6:	00 e0       	ldi	r16, 0x00	; 0
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:71
    if((primer_digito>>i)&0x01){
      pinMode(pines[length], OUTPUT); //Lo pongo en en OUTPUT, porque esta seccion del segmento sera la que manejemos prmero.
 3c8:	81 e0       	ldi	r24, 0x01	; 1
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:149
          /*pinMode(pines[length-4], OUTPUT);
          pinMode(pines[length-5], OUTPUT);
          digitalWrite(pines[length-4], not_minutes);
          digitalWrite(pines[length-5], !not_minutes);*/
          setPin(pines[length-4], not_minutes);
          setPin(pines[length-5], !not_minutes);
 3ca:	3a 81       	ldd	r19, Y+2	; 0x02
 3cc:	38 27       	eor	r19, r24
 3ce:	3d 83       	std	Y+5, r19	; 0x05
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:70
  //pines=Agrupacion_M;//Minutos_pins;
  int length = 5;//(sizeof(pines)/sizeof(pines[0]))-1;//5;//sizeof(pines);
  if(horas) length=2;
  //Serial.println(String("Numero: ")+numero);
  for(int i=0; i<4; i++){
    if((primer_digito>>i)&0x01){
 3d0:	c6 01       	movw	r24, r12
 3d2:	00 2e       	mov	r0, r16
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <printHoras(int, int*, bool, bool)+0xbc>
 3d6:	95 95       	asr	r25
 3d8:	87 95       	ror	r24
 3da:	0a 94       	dec	r0
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <printHoras(int, int*, bool, bool)+0xb8>
 3de:	80 ff       	sbrs	r24, 0
 3e0:	21 c0       	rjmp	.+66     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:71
      pinMode(pines[length], OUTPUT); //Lo pongo en en OUTPUT, porque esta seccion del segmento sera la que manejemos prmero.
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	f1 01       	movw	r30, r2
 3e6:	80 81       	ld	r24, Z
 3e8:	f9 de       	rcall	.-526    	; 0x1dc <pinMode>
 3ea:	f1 01       	movw	r30, r2
 3ec:	80 81       	ld	r24, Z
 3ee:	91 81       	ldd	r25, Z+1	; 0x01
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:74
      //Estos son los casos para la primera parte del segmento, que esta controlada por la ultima patilla en el array
      ////Serial.println(String("Comprobacion Realizada Bit numero: ")+i+String("Byte: ")+ primer_digito);
      switch(i){
 3f0:	02 30       	cpi	r16, 0x02	; 2
 3f2:	11 05       	cpc	r17, r1
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <printHoras(int, int*, bool, bool)+0xda>
 3f6:	6d c0       	rjmp	.+218    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 3f8:	03 30       	cpi	r16, 0x03	; 3
 3fa:	11 05       	cpc	r17, r1
 3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	6e c0       	rjmp	.+220    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 400:	01 30       	cpi	r16, 0x01	; 1
 402:	11 05       	cpc	r17, r1
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	61 c0       	rjmp	.+194    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:79
        case 0:
          /*digitalWrite(pines[length], HIGH);
          pinMode(pines[length-1], OUTPUT);
          digitalWrite(pines[length-1], LOW);*/
          setPin(pines[length], 1);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	77 df       	rcall	.-274    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:80
          setPin(pines[length-1], 0);
 40c:	60 e0       	ldi	r22, 0x00	; 0
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:87
        case 1:
          /*digitalWrite(pines[length], LOW);
          pinMode(pines[length-1], OUTPUT);
          digitalWrite(pines[length-1], HIGH);*/
          setPin(pines[length], 0);
          setPin(pines[length-1], 1);
 40e:	f2 01       	movw	r30, r4
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:101
        case 3:
          /*digitalWrite(pines[length], LOW);
          pinMode(pines[length-2], OUTPUT);
          digitalWrite(pines[length-2], HIGH);*/
          setPin(pines[length], 0);
          setPin(pines[length-2], 1);
 410:	80 81       	ld	r24, Z
 412:	91 81       	ldd	r25, Z+1	; 0x01
 414:	72 df       	rcall	.-284    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:104
          break;
      }
      delay(1);
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	37 df       	rcall	.-402    	; 0x28e <delay>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:105
      PORTA= 0x00;
 420:	1b ba       	out	0x1b, r1	; 27
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:106
      DDRA = 0x00;
 422:	1a ba       	out	0x1a, r1	; 26
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:109
      
    }
    if((segundo_digito>>i)&0x01){
 424:	c5 01       	movw	r24, r10
 426:	00 2e       	mov	r0, r16
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	95 95       	asr	r25
 42c:	87 95       	ror	r24
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	80 ff       	sbrs	r24, 0
 434:	26 c0       	rjmp	.+76     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:111
      ////Serial.println(String("Comprobacion Realizada Bit numero: ")+i+String("Byte: ")+ segundo_digito);
      switch(i){
 436:	01 30       	cpi	r16, 0x01	; 1
 438:	11 05       	cpc	r17, r1
 43a:	09 f4       	brne	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	5f c0       	rjmp	.+190    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 43e:	02 30       	cpi	r16, 0x02	; 2
 440:	11 05       	cpc	r17, r1
 442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	73 c0       	rjmp	.+230    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 446:	01 15       	cp	r16, r1
 448:	11 05       	cpc	r17, r1
 44a:	a1 f4       	brne	.+40     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:113
        case 0:
          if(horas){
 44c:	f9 81       	ldd	r31, Y+1	; 0x01
 44e:	ff 23       	and	r31, r31
 450:	09 f4       	brne	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	48 c0       	rjmp	.+144    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:114
            pinMode(pines[0], OUTPUT);
 454:	61 e0       	ldi	r22, 0x01	; 1
 456:	f4 01       	movw	r30, r8
 458:	80 81       	ld	r24, Z
 45a:	c0 de       	rcall	.-640    	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:115
            pinMode(pines[1], OUTPUT);
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	f4 01       	movw	r30, r8
 460:	82 81       	ldd	r24, Z+2	; 0x02
 462:	bc de       	rcall	.-648    	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:116
            digitalWrite(pines[0], HIGH);
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	f4 01       	movw	r30, r8
 468:	80 81       	ld	r24, Z
 46a:	7b de       	rcall	.-778    	; 0x162 <digitalWrite>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:117
            digitalWrite(pines[1], LOW);
 46c:	60 e0       	ldi	r22, 0x00	; 0
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:132
        case 1:
          if(horas){
            pinMode(pines[0], OUTPUT);
            pinMode(pines[1], OUTPUT);
            digitalWrite(pines[0], LOW);
            digitalWrite(pines[1], HIGH);
 46e:	f4 01       	movw	r30, r8
 470:	82 81       	ldd	r24, Z+2	; 0x02
 472:	77 de       	rcall	.-786    	; 0x162 <digitalWrite>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:152
          digitalWrite(pines[length-5], !not_minutes);*/
          setPin(pines[length-4], not_minutes);
          setPin(pines[length-5], !not_minutes);
          break;
      }
      delay(1);
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	08 df       	rcall	.-496    	; 0x28e <delay>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:153
      PORTA= 0x00;
 47e:	1b ba       	out	0x1b, r1	; 27
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:154
      DDRA = 0x00;
 480:	1a ba       	out	0x1a, r1	; 26
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:69
  byte segundo_digito = numero/10;//Guardamos el segundo digito
  //pines=Agrupacion_M;//Minutos_pins;
  int length = 5;//(sizeof(pines)/sizeof(pines[0]))-1;//5;//sizeof(pines);
  if(horas) length=2;
  //Serial.println(String("Numero: ")+numero);
  for(int i=0; i<4; i++){
 482:	0f 5f       	subi	r16, 0xFF	; 255
 484:	1f 4f       	sbci	r17, 0xFF	; 255
 486:	04 30       	cpi	r16, 0x04	; 4
 488:	11 05       	cpc	r17, r1
 48a:	09 f0       	breq	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	a1 cf       	rjmp	.-190    	; 0x3d0 <printHoras(int, int*, bool, bool)+0xb2>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:158
      PORTA= 0x00;
      DDRA = 0x00;
    }

  }
}
 48e:	27 96       	adiw	r28, 0x07	; 7
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	1f 91       	pop	r17
 4a0:	0f 91       	pop	r16
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	bf 90       	pop	r11
 4ac:	af 90       	pop	r10
 4ae:	9f 90       	pop	r9
 4b0:	8f 90       	pop	r8
 4b2:	7f 90       	pop	r7
 4b4:	6f 90       	pop	r6
 4b6:	5f 90       	pop	r5
 4b8:	4f 90       	pop	r4
 4ba:	3f 90       	pop	r3
 4bc:	2f 90       	pop	r2
 4be:	08 95       	ret
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:67
  //El booleano not_minutes se usa en el 3 led del segundo segmento, para determinar que lado de los 2 es (Minutos o segundos)
  byte primer_digito = numero%10; //Guardamos el primer digito
  byte segundo_digito = numero/10;//Guardamos el segundo digito
  //pines=Agrupacion_M;//Minutos_pins;
  int length = 5;//(sizeof(pines)/sizeof(pines[0]))-1;//5;//sizeof(pines);
  if(horas) length=2;
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	9c 83       	std	Y+4, r25	; 0x04
 4c6:	8b 83       	std	Y+3, r24	; 0x03
 4c8:	50 cf       	rjmp	.-352    	; 0x36a <printHoras(int, int*, bool, bool)+0x4c>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:86
          break;
        case 1:
          /*digitalWrite(pines[length], LOW);
          pinMode(pines[length-1], OUTPUT);
          digitalWrite(pines[length-1], HIGH);*/
          setPin(pines[length], 0);
 4ca:	60 e0       	ldi	r22, 0x00	; 0
 4cc:	16 df       	rcall	.-468    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:87
          setPin(pines[length-1], 1);
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	9e cf       	rjmp	.-196    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:93
          break;
        case 2:
          /*digitalWrite(pines[length], HIGH);
          pinMode(pines[length-2], OUTPUT);
          digitalWrite(pines[length-2], LOW);*/
          setPin(pines[length], 1);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	12 df       	rcall	.-476    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:94
          setPin(pines[length-2], 0);
 4d6:	60 e0       	ldi	r22, 0x00	; 0
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:101
        case 3:
          /*digitalWrite(pines[length], LOW);
          pinMode(pines[length-2], OUTPUT);
          digitalWrite(pines[length-2], HIGH);*/
          setPin(pines[length], 0);
          setPin(pines[length-2], 1);
 4d8:	f3 01       	movw	r30, r6
 4da:	9a cf       	rjmp	.-204    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:100
          break;
        case 3:
          /*digitalWrite(pines[length], LOW);
          pinMode(pines[length-2], OUTPUT);
          digitalWrite(pines[length-2], HIGH);*/
          setPin(pines[length], 0);
 4dc:	60 e0       	ldi	r22, 0x00	; 0
 4de:	0d df       	rcall	.-486    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:101
          setPin(pines[length-2], 1);
 4e0:	61 e0       	ldi	r22, 0x01	; 1
 4e2:	fa cf       	rjmp	.-12     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:123
          }else{
            /*pinMode(pines[length-3], OUTPUT);
            pinMode(pines[length-4], OUTPUT);
            digitalWrite(pines[length-3], LOW);
            digitalWrite(pines[length-4], HIGH);*/
            setPin(pines[length-3], 0);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	ee 81       	ldd	r30, Y+6	; 0x06
 4e8:	ff 81       	ldd	r31, Y+7	; 0x07
 4ea:	80 81       	ld	r24, Z
 4ec:	91 81       	ldd	r25, Z+1	; 0x01
 4ee:	05 df       	rcall	.-502    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:124
            setPin(pines[length-4], 1);
 4f0:	61 e0       	ldi	r22, 0x01	; 1
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:140
            /*pinMode(pines[length-3], OUTPUT);
            pinMode(pines[length-4], OUTPUT);
            digitalWrite(pines[length-3], HIGH);
            digitalWrite(pines[length-4], LOW);*/
            setPin(pines[length-3], 1);
            setPin(pines[length-4], 0);
 4f2:	f7 01       	movw	r30, r14
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:149
          /*pinMode(pines[length-4], OUTPUT);
          pinMode(pines[length-5], OUTPUT);
          digitalWrite(pines[length-4], not_minutes);
          digitalWrite(pines[length-5], !not_minutes);*/
          setPin(pines[length-4], not_minutes);
          setPin(pines[length-5], !not_minutes);
 4f4:	80 81       	ld	r24, Z
 4f6:	91 81       	ldd	r25, Z+1	; 0x01
 4f8:	00 df       	rcall	.-512    	; 0x2fa <setPin(int, bool)>
 4fa:	bc cf       	rjmp	.-136    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:128
            setPin(pines[length-3], 0);
            setPin(pines[length-4], 1);
          }
          break;
        case 1:
          if(horas){
 4fc:	f9 81       	ldd	r31, Y+1	; 0x01
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:129
            pinMode(pines[0], OUTPUT);
 4fe:	61 e0       	ldi	r22, 0x01	; 1
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:128
            setPin(pines[length-3], 0);
            setPin(pines[length-4], 1);
          }
          break;
        case 1:
          if(horas){
 500:	ff 23       	and	r31, r31
 502:	69 f0       	breq	.+26     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:129
            pinMode(pines[0], OUTPUT);
 504:	f4 01       	movw	r30, r8
 506:	80 81       	ld	r24, Z
 508:	69 de       	rcall	.-814    	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:130
            pinMode(pines[1], OUTPUT);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	f4 01       	movw	r30, r8
 50e:	82 81       	ldd	r24, Z+2	; 0x02
 510:	65 de       	rcall	.-822    	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:131
            digitalWrite(pines[0], LOW);
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	f4 01       	movw	r30, r8
 516:	80 81       	ld	r24, Z
 518:	24 de       	rcall	.-952    	; 0x162 <digitalWrite>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:132
            digitalWrite(pines[1], HIGH);
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	a8 cf       	rjmp	.-176    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:139
          else{
            /*pinMode(pines[length-3], OUTPUT);
            pinMode(pines[length-4], OUTPUT);
            digitalWrite(pines[length-3], HIGH);
            digitalWrite(pines[length-4], LOW);*/
            setPin(pines[length-3], 1);
 51e:	ee 81       	ldd	r30, Y+6	; 0x06
 520:	ff 81       	ldd	r31, Y+7	; 0x07
 522:	80 81       	ld	r24, Z
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	e9 de       	rcall	.-558    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:140
            setPin(pines[length-4], 0);
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	e3 cf       	rjmp	.-58     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:148
        case 2:
          /*pinMode(pines[length-4], OUTPUT);
          pinMode(pines[length-5], OUTPUT);
          digitalWrite(pines[length-4], not_minutes);
          digitalWrite(pines[length-5], !not_minutes);*/
          setPin(pines[length-4], not_minutes);
 52c:	6a 81       	ldd	r22, Y+2	; 0x02
 52e:	f7 01       	movw	r30, r14
 530:	80 81       	ld	r24, Z
 532:	91 81       	ldd	r25, Z+1	; 0x01
 534:	e2 de       	rcall	.-572    	; 0x2fa <setPin(int, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:149
          setPin(pines[length-5], !not_minutes);
 536:	6d 81       	ldd	r22, Y+5	; 0x05
 538:	eb 81       	ldd	r30, Y+3	; 0x03
 53a:	fc 81       	ldd	r31, Y+4	; 0x04
 53c:	db cf       	rjmp	.-74     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>

0000053e <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:226
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
  USISR = temp;                                          // Set USISR according to temp.
 53e:	8e b9       	out	0x0e, r24	; 14
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:234
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    DELAY_T2TWI;
    USICR = temp; // Generate positive SCL edge.
 540:	8b e2       	ldi	r24, 0x2B	; 43
_delay_us():
/home/lukilukeskywalker/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay.h:276
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 542:	9e e0       	ldi	r25, 0x0E	; 14
 544:	9a 95       	dec	r25
 546:	f1 f7       	brne	.-4      	; 0x544 <USI_TWI_Master_Transfer+0x6>
USI_TWI_Master_Transfer():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:234
 548:	8d b9       	out	0x0d, r24	; 13
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:235
    while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
 54a:	cc 9b       	sbis	0x19, 4	; 25
 54c:	fe cf       	rjmp	.-4      	; 0x54a <USI_TWI_Master_Transfer+0xc>
_delay_us():
/home/lukilukeskywalker/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay.h:276
 54e:	96 e0       	ldi	r25, 0x06	; 6
 550:	9a 95       	dec	r25
 552:	f1 f7       	brne	.-4      	; 0x550 <USI_TWI_Master_Transfer+0x12>
 554:	00 c0       	rjmp	.+0      	; 0x556 <USI_TWI_Master_Transfer+0x18>
USI_TWI_Master_Transfer():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:238
      ; // Wait for SCL to go high.
    DELAY_T4TWI;
    USICR = temp;                   // Generate negative SCL edge.
 556:	8d b9       	out	0x0d, r24	; 13
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:239
  } while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
 558:	76 9b       	sbis	0x0e, 6	; 14
 55a:	f3 cf       	rjmp	.-26     	; 0x542 <USI_TWI_Master_Transfer+0x4>
_delay_us():
/home/lukilukeskywalker/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay.h:276
 55c:	8e e0       	ldi	r24, 0x0E	; 14
 55e:	8a 95       	dec	r24
 560:	f1 f7       	brne	.-4      	; 0x55e <USI_TWI_Master_Transfer+0x20>
USI_TWI_Master_Transfer():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:242

  DELAY_T2TWI;
  temp  = USIDR;                 // Read out data.
 562:	8f b1       	in	r24, 0x0f	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:243
  USIDR = 0xFF;                  // Release SDA.
 564:	9f ef       	ldi	r25, 0xFF	; 255
 566:	9f b9       	out	0x0f, r25	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:244
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
 568:	d6 9a       	sbi	0x1a, 6	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:247

  return temp; // Return the data from the USIDR
}
 56a:	08 95       	ret

0000056c <USI_TWI_Start_Transceiver_With_Data_Stop>:
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:106
#ifndef __GNUC__
__x // AVR compiler
#endif
    unsigned char
    USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
 56c:	ff 92       	push	r15
 56e:	0f 93       	push	r16
 570:	1f 93       	push	r17
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	06 2f       	mov	r16, r22
 578:	14 2f       	mov	r17, r20
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:114
                                 (0x0 << USICNT0); // set USI to shift 8 bits i.e. count 16 clock edges.
  unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC)
                                 |                 // Prepare register value to: Clear flags, and
                                 (0xE << USICNT0); // set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState  = 0;
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <USI_TWI_state>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:145
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if (!(*msg
 580:	fc 01       	movw	r30, r24
 582:	20 81       	ld	r18, Z
 584:	20 fd       	sbrc	r18, 0
 586:	03 c0       	rjmp	.+6      	; 0x58e <USI_TWI_Start_Transceiver_With_Data_Stop+0x22>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:148
        & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
 588:	23 e0       	ldi	r18, 0x03	; 3
 58a:	20 93 b5 00 	sts	0x00B5, r18	; 0x8000b5 <USI_TWI_state>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:152
  }

  /* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
 58e:	dc 9a       	sbi	0x1b, 4	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:153
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
 590:	cc 9b       	sbis	0x19, 4	; 25
 592:	fe cf       	rjmp	.-4      	; 0x590 <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
_delay_us():
/home/lukilukeskywalker/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay.h:276
 594:	f6 e0       	ldi	r31, 0x06	; 6
 596:	fa 95       	dec	r31
 598:	f1 f7       	brne	.-4      	; 0x596 <USI_TWI_Start_Transceiver_With_Data_Stop+0x2a>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <USI_TWI_Start_Transceiver_With_Data_Stop+0x30>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:162
#else
  DELAY_T2TWI; // Delay for T2TWI if TWI_STANDARD_MODE
#endif

  /* Generate Start Condition */
  PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
 59c:	de 98       	cbi	0x1b, 6	; 27
_delay_us():
/home/lukilukeskywalker/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay.h:276
 59e:	26 e0       	ldi	r18, 0x06	; 6
 5a0:	2a 95       	dec	r18
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x34>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x3a>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:164
  DELAY_T4TWI;
  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
 5a6:	dc 98       	cbi	0x1b, 4	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:165
  PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
 5a8:	de 9a       	sbi	0x1b, 6	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:168

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USISIF))) {
 5aa:	77 99       	sbic	0x0e, 7	; 14
 5ac:	0b c0       	rjmp	.+22     	; 0x5c4 <USI_TWI_Start_Transceiver_With_Data_Stop+0x58>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:169
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
 5ae:	87 e0       	ldi	r24, 0x07	; 7
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:187

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
        if (USI_TWI_state.addressMode)
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
 5b0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <USI_TWI_state>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:190
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
 5b4:	10 e0       	ldi	r17, 0x00	; 0
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:217
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
}
 5b6:	81 2f       	mov	r24, r17
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	ff 90       	pop	r15
 5c2:	08 95       	ret
 5c4:	ec 01       	movw	r28, r24
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:203
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 5c6:	ff 24       	eor	r15, r15
 5c8:	fa 94       	dec	r15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:177
#endif

  /*Write address and Read/Write data */
  do {
    /* If masterWrite cycle (or initial address transmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
 5ca:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <USI_TWI_state>
 5ce:	83 70       	andi	r24, 0x03	; 3
 5d0:	19 f1       	breq	.+70     	; 0x618 <USI_TWI_Start_Transceiver_With_Data_Stop+0xac>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:179
      /* Write a byte */
      PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
 5d2:	dc 98       	cbi	0x1b, 4	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:180
      USIDR = *(msg++);                        // Setup data.
 5d4:	88 81       	ld	r24, Y
 5d6:	8f b9       	out	0x0f, r24	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:181
      USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
 5d8:	80 ef       	ldi	r24, 0xF0	; 240
 5da:	b1 df       	rcall	.-158    	; 0x53e <USI_TWI_Master_Transfer>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:184

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 5dc:	d6 98       	cbi	0x1a, 6	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:185
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
 5de:	8e ef       	ldi	r24, 0xFE	; 254
 5e0:	ae df       	rcall	.-164    	; 0x53e <USI_TWI_Master_Transfer>
 5e2:	80 ff       	sbrs	r24, 0
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <USI_TWI_Start_Transceiver_With_Data_Stop+0x92>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186
        if (USI_TWI_state.addressMode)
 5e6:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <USI_TWI_state>
 5ea:	18 2f       	mov	r17, r24
 5ec:	11 70       	andi	r17, 0x01	; 1
 5ee:	80 ff       	sbrs	r24, 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8a>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:187
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
 5f2:	86 e0       	ldi	r24, 0x06	; 6
 5f4:	dd cf       	rjmp	.-70     	; 0x5b0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x44>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:189
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
 5f6:	85 e0       	ldi	r24, 0x05	; 5
USI_TWI_Master_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:265
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
  DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
 5f8:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <USI_TWI_state>
 5fc:	dc cf       	rjmp	.-72     	; 0x5b6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x4a>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:192
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
      }
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
 5fe:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <USI_TWI_state>
 602:	8e 7f       	andi	r24, 0xFE	; 254
 604:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <USI_TWI_state>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:209
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
    }
  } while (--msgSize); // Until all data sent/received.
 608:	01 50       	subi	r16, 0x01	; 1
 60a:	21 96       	adiw	r28, 0x01	; 1
 60c:	01 11       	cpse	r16, r1
 60e:	dd cf       	rjmp	.-70     	; 0x5ca <USI_TWI_Start_Transceiver_With_Data_Stop+0x5e>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:211

  if (stop) {
 610:	11 11       	cpse	r17, r1
 612:	0e c0       	rjmp	.+28     	; 0x630 <USI_TWI_Start_Transceiver_With_Data_Stop+0xc4>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:216
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
 614:	11 e0       	ldi	r17, 0x01	; 1
 616:	cf cf       	rjmp	.-98     	; 0x5b6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x4a>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:197
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    }
    /* Else masterRead cycle*/
    else {
      /* Read a data byte */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
 618:	d6 98       	cbi	0x1a, 6	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:198
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
 61a:	80 ef       	ldi	r24, 0xF0	; 240
 61c:	90 df       	rcall	.-224    	; 0x53e <USI_TWI_Master_Transfer>
 61e:	88 83       	st	Y, r24
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:201

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
 620:	01 30       	cpi	r16, 0x01	; 1
 622:	21 f4       	brne	.+8      	; 0x62c <USI_TWI_Start_Transceiver_With_Data_Stop+0xc0>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:203
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
 624:	ff b8       	out	0x0f, r15	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:207
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
 626:	8e ef       	ldi	r24, 0xFE	; 254
 628:	8a df       	rcall	.-236    	; 0x53e <USI_TWI_Master_Transfer>
 62a:	ee cf       	rjmp	.-36     	; 0x608 <USI_TWI_Start_Transceiver_With_Data_Stop+0x9c>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:205
      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
 62c:	1f b8       	out	0x0f, r1	; 15
 62e:	fb cf       	rjmp	.-10     	; 0x626 <USI_TWI_Start_Transceiver_With_Data_Stop+0xba>
USI_TWI_Master_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:255
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
  PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
 630:	de 98       	cbi	0x1b, 6	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:256
  PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
 632:	dc 9a       	sbi	0x1b, 4	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:257
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
 634:	cc 9b       	sbis	0x19, 4	; 25
 636:	fe cf       	rjmp	.-4      	; 0x634 <USI_TWI_Start_Transceiver_With_Data_Stop+0xc8>
_delay_us():
/home/lukilukeskywalker/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay.h:276
 638:	86 e0       	ldi	r24, 0x06	; 6
 63a:	8a 95       	dec	r24
 63c:	f1 f7       	brne	.-4      	; 0x63a <USI_TWI_Start_Transceiver_With_Data_Stop+0xce>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <USI_TWI_Start_Transceiver_With_Data_Stop+0xd4>
USI_TWI_Master_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:260
    ; // Wait for SCL to go high.
  DELAY_T4TWI;
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
 640:	de 9a       	sbi	0x1b, 6	; 27
_delay_us():
/home/lukilukeskywalker/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino5/avr/include/util/delay.h:276
 642:	ee e0       	ldi	r30, 0x0E	; 14
 644:	ea 95       	dec	r30
 646:	f1 f7       	brne	.-4      	; 0x644 <USI_TWI_Start_Transceiver_With_Data_Stop+0xd8>
USI_TWI_Master_Stop():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
  DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
 648:	75 99       	sbic	0x0e, 5	; 14
 64a:	e4 cf       	rjmp	.-56     	; 0x614 <USI_TWI_Start_Transceiver_With_Data_Stop+0xa8>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:265
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
 64c:	88 e0       	ldi	r24, 0x08	; 8
 64e:	d4 cf       	rjmp	.-88     	; 0x5f8 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8c>

00000650 <TwoWire::endTransmission(unsigned char) [clone .constprop.11]>:
_ZN7TwoWire15endTransmissionEh.constprop.11():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:469

uint8_t TwoWire::endTransmission(uint8_t sendStop) {
  // transmit buffer (blocking)
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
 650:	48 2f       	mov	r20, r24
 652:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <TwoWire::BufferLength>
 656:	8a e6       	ldi	r24, 0x6A	; 106
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	88 df       	rcall	.-240    	; 0x56c <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:471
  // reset tx buffer iterator vars
  BufferIndex = 0;
 65c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:472
  BufferLength = 0;
 660:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <TwoWire::BufferLength>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:474
  // indicate that we are done transmitting
  transmitting = 0;
 664:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TwoWire::transmitting>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:476
  // check for error
  if (ret == FALSE) {
 668:	81 11       	cpse	r24, r1
 66a:	10 c0       	rjmp	.+32     	; 0x68c <TwoWire::endTransmission(unsigned char) [clone .constprop.11]+0x3c>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:477
    switch (USI_TWI_Get_State_Info()) {
 66c:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <USI_TWI_state>
 670:	85 30       	cpi	r24, 0x05	; 5
 672:	41 f0       	breq	.+16     	; 0x684 <TwoWire::endTransmission(unsigned char) [clone .constprop.11]+0x34>
 674:	86 30       	cpi	r24, 0x06	; 6
 676:	21 f0       	breq	.+8      	; 0x680 <TwoWire::endTransmission(unsigned char) [clone .constprop.11]+0x30>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	31 f4       	brne	.+12     	; 0x688 <TwoWire::endTransmission(unsigned char) [clone .constprop.11]+0x38>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:479
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
 67c:	81 e0       	ldi	r24, 0x01	; 1
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:488
      return 3; //received NACK on transmit of data
    }
    return 4; //other error
  }
  return 0; //success
}
 67e:	08 95       	ret
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:481
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
 680:	82 e0       	ldi	r24, 0x02	; 2
 682:	08 95       	ret
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:483
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	08 95       	ret
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:485
    }
    return 4; //other error
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	08 95       	ret
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:487
  }
  return 0; //success
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	08 95       	ret

00000690 <DS3231_get_time(time_struct*) [clone .constprop.1]>:
_Z15DS3231_get_timeP11time_struct.constprop.1():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:31
  int8_t nint;
  if((temp_msb & 0x80) !=0) nint = temp_msb | ~((1<<8) -1);
  else nint = temp_msb;
  return 0.25*temp_lsb + nint;
}
void DS3231_get_time(struct time_struct *t){
 690:	cf 92       	push	r12
 692:	df 92       	push	r13
 694:	ef 92       	push	r14
 696:	ff 92       	push	r15
 698:	0f 93       	push	r16
 69a:	1f 93       	push	r17
 69c:	cf 93       	push	r28
 69e:	df 93       	push	r29
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <DS3231_get_time(time_struct*) [clone .constprop.1]+0x12>
 6a2:	1f 92       	push	r1
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
beginTransmission():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:453
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <TwoWire::transmitting>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:455
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
 6ae:	90 ed       	ldi	r25, 0xD0	; 208
 6b0:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__data_end>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:457
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
 6b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:458
  BufferLength = BufferIndex;
 6b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <TwoWire::BufferLength>
write():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.h:138
    uint8_t isActive(void);

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	1e dd       	rcall	.-1476   	; 0xfc <TwoWire::write(unsigned char) [clone .constprop.13]>
endTransmission():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:491
  }
  return 0; //success
}

uint8_t TwoWire::endTransmission(void) {
  return endTransmission(true);
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	c6 df       	rcall	.-116    	; 0x650 <TwoWire::endTransmission(unsigned char) [clone .constprop.11]>
_Z15DS3231_get_timeP11time_struct.constprop.1():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:36
  Wire.beginTransmission(DS3231_I2C_ADDR);
  Wire.write(DS3231_TIME_ADDR);
  Wire.endTransmission();
  uint8_t gotData = false;
  uint32_t start= millis();
 6c4:	0e de       	rcall	.-996    	; 0x2e2 <millis>
 6c6:	6b 01       	movw	r12, r22
 6c8:	7c 01       	movw	r14, r24
requestFrom():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:417
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
 6ca:	11 ed       	ldi	r17, 0xD1	; 209
_Z15DS3231_get_timeP11time_struct.constprop.1():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:37
  while(millis()-start < DS3231_TRANSACTION_TIMEOUT){
 6cc:	0a de       	rcall	.-1004   	; 0x2e2 <millis>
 6ce:	6c 19       	sub	r22, r12
 6d0:	7d 09       	sbc	r23, r13
 6d2:	8e 09       	sbc	r24, r14
 6d4:	9f 09       	sbc	r25, r15
 6d6:	64 36       	cpi	r22, 0x64	; 100
 6d8:	71 05       	cpc	r23, r1
 6da:	81 05       	cpc	r24, r1
 6dc:	91 05       	cpc	r25, r1
 6de:	a8 f5       	brcc	.+106    	; 0x74a <DS3231_get_time(time_struct*) [clone .constprop.1]+0xba>
requestFrom():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:417
 6e0:	10 93 6a 00 	sts	0x006A, r17	; 0x80006a <__data_end>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:420
  // perform blocking read into buffer
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer, quantity,
                                                         sendStop);
 6e4:	41 e0       	ldi	r20, 0x01	; 1
 6e6:	64 e0       	ldi	r22, 0x04	; 4
 6e8:	8a e6       	ldi	r24, 0x6A	; 106
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	3f df       	rcall	.-386    	; 0x56c <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:422
  // set rx buffer iterator vars
  BufferIndex = 1; // ignore slave address
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:424
  // check for error
  if (ret == FALSE) {
 6f4:	81 11       	cpse	r24, r1
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <DS3231_get_time(time_struct*) [clone .constprop.1]+0x6e>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:425
    BufferLength = BufferIndex;
 6f8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <TwoWire::BufferLength>
 6fc:	e7 cf       	rjmp	.-50     	; 0x6cc <DS3231_get_time(time_struct*) [clone .constprop.1]+0x3c>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:428
    return 0;
  }
  BufferLength = quantity;
 6fe:	84 e0       	ldi	r24, 0x04	; 4
 700:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <TwoWire::BufferLength>
 704:	8e 01       	movw	r16, r28
 706:	0f 5f       	subi	r16, 0xFF	; 255
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	7e 01       	movw	r14, r28
 70c:	84 e0       	ldi	r24, 0x04	; 4
 70e:	e8 0e       	add	r14, r24
 710:	f1 1c       	adc	r15, r1
bcdtodec():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:85
      return 0; // error timeout
    rv = Wire.read();
    return rv;
}
byte bcdtodec(byte val){
  return((val/16*10)+(val%10));
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	d8 2e       	mov	r13, r24
_Z15DS3231_get_timeP11time_struct.constprop.1():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:47
  }
  if (!gotData) return;
  uint8_t n;
  uint8_t Time[3];
  for(uint8_t i=0; i<=2; i++){
    n = Wire.read();
 716:	c4 dc       	rcall	.-1656   	; 0xa0 <TwoWire::read() [clone .constprop.14]>
 718:	98 2f       	mov	r25, r24
bcdtodec():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:85
      return 0; // error timeout
    rv = Wire.read();
    return rv;
}
byte bcdtodec(byte val){
  return((val/16*10)+(val%10));
 71a:	82 95       	swap	r24
 71c:	8f 70       	andi	r24, 0x0F	; 15
 71e:	6a e0       	ldi	r22, 0x0A	; 10
 720:	2b d2       	rcall	.+1110   	; 0xb78 <__mulqi3>
 722:	28 2f       	mov	r18, r24
 724:	89 2f       	mov	r24, r25
 726:	6d 2d       	mov	r22, r13
 728:	30 d2       	rcall	.+1120   	; 0xb8a <__udivmodqi4>
 72a:	29 0f       	add	r18, r25
_Z15DS3231_get_timeP11time_struct.constprop.1():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:48
  if (!gotData) return;
  uint8_t n;
  uint8_t Time[3];
  for(uint8_t i=0; i<=2; i++){
    n = Wire.read();
    Time[i]=bcdtodec(n);
 72c:	f8 01       	movw	r30, r16
 72e:	21 93       	st	Z+, r18
 730:	8f 01       	movw	r16, r30
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:46
    }
  }
  if (!gotData) return;
  uint8_t n;
  uint8_t Time[3];
  for(uint8_t i=0; i<=2; i++){
 732:	ee 16       	cp	r14, r30
 734:	ff 06       	cpc	r15, r31
 736:	79 f7       	brne	.-34     	; 0x716 <DS3231_get_time(time_struct*) [clone .constprop.1]+0x86>
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:50
    n = Wire.read();
    Time[i]=bcdtodec(n);
  }
  t->second = Time[0];
 738:	89 81       	ldd	r24, Y+1	; 0x01
 73a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <time+0x2>
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:51
  t->minute = Time[1];
 73e:	8a 81       	ldd	r24, Y+2	; 0x02
 740:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <time+0x1>
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:52
  t->hour   = Time[2];
 744:	8b 81       	ldd	r24, Y+3	; 0x03
 746:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <time>
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:53
}
 74a:	0f 90       	pop	r0
 74c:	0f 90       	pop	r0
 74e:	0f 90       	pop	r0
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	ff 90       	pop	r15
 75a:	ef 90       	pop	r14
 75c:	df 90       	pop	r13
 75e:	cf 90       	pop	r12
 760:	08 95       	ret

00000762 <__vector_11>:
__vector_11():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:133
#else

#error Millis() timer not defined!

#endif
{
 762:	1f 92       	push	r1
 764:	0f 92       	push	r0
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	0f 92       	push	r0
 76a:	11 24       	eor	r1, r1
 76c:	2f 93       	push	r18
 76e:	3f 93       	push	r19
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:136
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
 778:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <millis_timer_millis>
 77c:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <millis_timer_millis+0x1>
 780:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <millis_timer_millis+0x2>
 784:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <millis_timer_millis+0x3>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:137
  unsigned char f = millis_timer_fract;
 788:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <millis_timer_fract>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:149
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
 78c:	26 e0       	ldi	r18, 0x06	; 6
 78e:	23 0f       	add	r18, r19
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:151

  if (f >= FRACT_MAX)
 790:	2d 37       	cpi	r18, 0x7D	; 125
 792:	68 f1       	brcs	.+90     	; 0x7ee <__vector_11+0x8c>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:153
  {
    f -= FRACT_MAX;
 794:	29 e8       	ldi	r18, 0x89	; 137
 796:	23 0f       	add	r18, r19
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:155
  m += 1;
    m += MILLIS_INC;
 798:	03 96       	adiw	r24, 0x03	; 3
 79a:	a1 1d       	adc	r26, r1
 79c:	b1 1d       	adc	r27, r1
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:162
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
 79e:	20 93 a9 00 	sts	0x00A9, r18	; 0x8000a9 <millis_timer_fract>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:163
  millis_timer_millis = m;
 7a2:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <millis_timer_millis>
 7a6:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <millis_timer_millis+0x1>
 7aa:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <millis_timer_millis+0x2>
 7ae:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <millis_timer_millis+0x3>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:164
  millis_timer_overflow_count++;
 7b2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <millis_timer_overflow_count>
 7b6:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <millis_timer_overflow_count+0x1>
 7ba:	a0 91 b0 00 	lds	r26, 0x00B0	; 0x8000b0 <millis_timer_overflow_count+0x2>
 7be:	b0 91 b1 00 	lds	r27, 0x00B1	; 0x8000b1 <millis_timer_overflow_count+0x3>
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	a1 1d       	adc	r26, r1
 7c6:	b1 1d       	adc	r27, r1
 7c8:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <millis_timer_overflow_count>
 7cc:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <millis_timer_overflow_count+0x1>
 7d0:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <millis_timer_overflow_count+0x2>
 7d4:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <millis_timer_overflow_count+0x3>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:171

//MICROSECONDS_PER_MILLIS_OVERFLOW=2048
//MILLIS_INC=2
//FRACT_INC=6
//FRACT_MAX=125
}
 7d8:	bf 91       	pop	r27
 7da:	af 91       	pop	r26
 7dc:	9f 91       	pop	r25
 7de:	8f 91       	pop	r24
 7e0:	3f 91       	pop	r19
 7e2:	2f 91       	pop	r18
 7e4:	0f 90       	pop	r0
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	0f 90       	pop	r0
 7ea:	1f 90       	pop	r1
 7ec:	18 95       	reti
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:159
  m += 1;
    m += MILLIS_INC;
  }
  else
  {
    m += MILLIS_INC;
 7ee:	02 96       	adiw	r24, 0x02	; 2
 7f0:	a1 1d       	adc	r26, r1
 7f2:	b1 1d       	adc	r27, r1
 7f4:	d4 cf       	rjmp	.-88     	; 0x79e <__vector_11+0x3c>

000007f6 <__vector_16>:
__vector_16():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
 7f6:	1f 92       	push	r1
 7f8:	0f 92       	push	r0
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	0f 92       	push	r0
 7fe:	11 24       	eor	r1, r1
 800:	2f 93       	push	r18
 802:	8f 93       	push	r24
 804:	9f 93       	push	r25
 806:	ef 93       	push	r30
 808:	ff 93       	push	r31
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
 80a:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <USI_TWI_Overflow_State>
 80e:	82 30       	cpi	r24, 0x02	; 2
 810:	09 f4       	brne	.+2      	; 0x814 <__vector_16+0x1e>
 812:	5e c0       	rjmp	.+188    	; 0x8d0 <__vector_16+0xda>
 814:	78 f4       	brcc	.+30     	; 0x834 <__vector_16+0x3e>
 816:	88 23       	and	r24, r24
 818:	49 f1       	breq	.+82     	; 0x86c <__vector_16+0x76>
 81a:	81 30       	cpi	r24, 0x01	; 1
 81c:	09 f4       	brne	.+2      	; 0x820 <__vector_16+0x2a>
 81e:	3e c0       	rjmp	.+124    	; 0x89c <__vector_16+0xa6>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:310
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
 820:	ff 91       	pop	r31
 822:	ef 91       	pop	r30
 824:	9f 91       	pop	r25
 826:	8f 91       	pop	r24
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
 834:	84 30       	cpi	r24, 0x04	; 4
 836:	09 f4       	brne	.+2      	; 0x83a <__vector_16+0x44>
 838:	51 c0       	rjmp	.+162    	; 0x8dc <__vector_16+0xe6>
 83a:	48 f1       	brcs	.+82     	; 0x88e <__vector_16+0x98>
 83c:	85 30       	cpi	r24, 0x05	; 5
 83e:	81 f7       	brne	.-32     	; 0x820 <__vector_16+0x2a>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:297
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 840:	84 e0       	ldi	r24, 0x04	; 4
 842:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_Overflow_State>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:298
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
 846:	9f b1       	in	r25, 0x0f	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:299
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
 848:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <TWI_RxHead>
 84c:	8f 5f       	subi	r24, 0xFF	; 255
 84e:	8f 70       	andi	r24, 0x0F	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:300
    if (TWI_RxTail != tmpRxHead) {
 850:	20 91 ba 00 	lds	r18, 0x00BA	; 0x8000ba <TWI_RxTail>
 854:	28 17       	cp	r18, r24
 856:	09 f4       	brne	.+2      	; 0x85a <__vector_16+0x64>
 858:	46 c0       	rjmp	.+140    	; 0x8e6 <__vector_16+0xf0>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:301
      TWI_RxHead            = tmpRxHead;
 85a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <TWI_RxHead>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
 85e:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <TWI_RxHead>
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	e6 59       	subi	r30, 0x96	; 150
 866:	ff 4f       	sbci	r31, 0xFF	; 255
 868:	90 83       	st	Z, r25
 86a:	0b c0       	rjmp	.+22     	; 0x882 <__vector_16+0x8c>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:221

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
 86c:	8f b1       	in	r24, 0x0f	; 15
 86e:	88 23       	and	r24, r24
 870:	19 f0       	breq	.+6      	; 0x878 <__vector_16+0x82>
 872:	8f b1       	in	r24, 0x0f	; 15
 874:	86 95       	lsr	r24
 876:	71 f4       	brne	.+28     	; 0x894 <__vector_16+0x9e>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:222
      if (USIDR & 0x01) {
 878:	78 9b       	sbis	0x0f, 0	; 15
 87a:	07 c0       	rjmp	.+14     	; 0x88a <__vector_16+0x94>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:229
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
 87c:	81 e0       	ldi	r24, 0x01	; 1
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:231
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 87e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_Overflow_State>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:233
      }
      SET_USI_TO_SEND_ACK();
 882:	1f b8       	out	0x0f, r1	; 15
 884:	d6 9a       	sbi	0x1a, 6	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
 886:	8e e7       	ldi	r24, 0x7E	; 126
 888:	21 c0       	rjmp	.+66     	; 0x8cc <__vector_16+0xd6>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:231
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
 88a:	84 e0       	ldi	r24, 0x04	; 4
 88c:	f8 cf       	rjmp	.-16     	; 0x87e <__vector_16+0x88>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:242
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
 88e:	8f b1       	in	r24, 0x0f	; 15
 890:	88 23       	and	r24, r24
 892:	21 f0       	breq	.+8      	; 0x89c <__vector_16+0xa6>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
 894:	d6 98       	cbi	0x1a, 6	; 26
 896:	88 ea       	ldi	r24, 0xA8	; 168
 898:	8d b9       	out	0x0d, r24	; 13
 89a:	17 c0       	rjmp	.+46     	; 0x8ca <__vector_16+0xd4>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:253

  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
 89c:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <TWI_TxTail>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:254
    if (TWI_TxHead != tmpTxTail) {
 8a0:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <TWI_TxHead>
 8a4:	98 17       	cp	r25, r24
 8a6:	b1 f3       	breq	.-20     	; 0x894 <__vector_16+0x9e>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:255
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
 8a8:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <TWI_TxTail>
 8ac:	8f 5f       	subi	r24, 0xFF	; 255
 8ae:	8f 70       	andi	r24, 0x0F	; 15
 8b0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <TWI_TxTail>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:256
      USIDR      = TWI_TxBuf[TWI_TxTail];
 8b4:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <TWI_TxTail>
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	e6 58       	subi	r30, 0x86	; 134
 8bc:	ff 4f       	sbci	r31, 0xFF	; 255
 8be:	80 81       	ld	r24, Z
 8c0:	8f b9       	out	0x0f, r24	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:262
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
 8c2:	82 e0       	ldi	r24, 0x02	; 2
 8c4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_Overflow_State>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:263
    SET_USI_TO_SEND_DATA();
 8c8:	d6 9a       	sbi	0x1a, 6	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:276

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    SET_USI_TO_READ_DATA();
 8ca:	80 e7       	ldi	r24, 0x70	; 112
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
 8cc:	8e b9       	out	0x0e, r24	; 14
 8ce:	a8 cf       	rjmp	.-176    	; 0x820 <__vector_16+0x2a>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:268
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
 8d0:	83 e0       	ldi	r24, 0x03	; 3
 8d2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_Overflow_State>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:269
    SET_USI_TO_READ_ACK();
 8d6:	d6 98       	cbi	0x1a, 6	; 26
 8d8:	1f b8       	out	0x0f, r1	; 15
 8da:	d5 cf       	rjmp	.-86     	; 0x886 <__vector_16+0x90>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:275
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
 8dc:	85 e0       	ldi	r24, 0x05	; 5
 8de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <USI_TWI_Overflow_State>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:276
    SET_USI_TO_READ_DATA();
 8e2:	d6 98       	cbi	0x1a, 6	; 26
 8e4:	f2 cf       	rjmp	.-28     	; 0x8ca <__vector_16+0xd4>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
 8e6:	d6 98       	cbi	0x1a, 6	; 26
 8e8:	ce cf       	rjmp	.-100    	; 0x886 <__vector_16+0x90>

000008ea <__vector_15>:
__vector_15():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
 8ea:	1f 92       	push	r1
 8ec:	0f 92       	push	r0
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	0f 92       	push	r0
 8f2:	11 24       	eor	r1, r1
 8f4:	8f 93       	push	r24
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:178
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
 8f6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <USI_TWI_Overflow_State>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
 8fa:	d6 98       	cbi	0x1a, 6	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
 8fc:	cc 9b       	sbis	0x19, 4	; 25
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__vector_15+0x1e>
 900:	ce 9b       	sbis	0x19, 6	; 25
 902:	fc cf       	rjmp	.-8      	; 0x8fc <__vector_15+0x12>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
 904:	88 ea       	ldi	r24, 0xA8	; 168
 906:	01 c0       	rjmp	.+2      	; 0x90a <__vector_15+0x20>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
 908:	88 ef       	ldi	r24, 0xF8	; 248
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
 90a:	8d b9       	out	0x0d, r24	; 13
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
 90c:	80 ef       	ldi	r24, 0xF0	; 240
 90e:	8e b9       	out	0x0e, r24	; 14
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
 910:	8f 91       	pop	r24
 912:	0f 90       	pop	r0
 914:	0f be       	out	0x3f, r0	; 63
 916:	0f 90       	pop	r0
 918:	1f 90       	pop	r1
 91a:	18 95       	reti

0000091c <main>:
main():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/main.cpp:6
#include <Arduino.h>

int main(void)
{
  #ifdef TUNED_OSCCAL_VALUE
  OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
 91c:	81 b7       	in	r24, 0x31	; 49
 91e:	81 bf       	out	0x31, r24	; 49
init():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:699
    } else {
      OSCCAL += 5;
    }
  }
  #endif
  sei();
 920:	78 94       	sei
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:831
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
 922:	80 b7       	in	r24, 0x30	; 48
 924:	82 60       	ori	r24, 0x02	; 2
 926:	80 bf       	out	0x30, r24	; 48
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:832
  sbi(TCCR0A, WGM00);
 928:	80 b7       	in	r24, 0x30	; 48
 92a:	81 60       	ori	r24, 0x01	; 1
 92c:	80 bf       	out	0x30, r24	; 48
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:855
  #endif

  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
 92e:	83 b7       	in	r24, 0x33	; 51
 930:	88 7f       	andi	r24, 0xF8	; 248
 932:	83 60       	ori	r24, 0x03	; 3
 934:	83 bf       	out	0x33, r24	; 51
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:867
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
 936:	78 94       	sei
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:874
  #ifndef DISABLEMILLIS
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
  #elif defined(TIMSK0) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK0, TOIE0);
 938:	89 b7       	in	r24, 0x39	; 57
 93a:	81 60       	ori	r24, 0x01	; 1
 93c:	89 bf       	out	0x39, r24	; 57
initToneTimerInternal():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:526
  sbi(TCCR1C, PWM1D);
  cbi(TCCR1D, WGM11);
  sbi(TCCR1D, WGM10);
  TCCR1B |= (ToneTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_TONE == 1)
  TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); //stop the clock to configure
 93e:	8e b5       	in	r24, 0x2e	; 46
 940:	88 7f       	andi	r24, 0xF8	; 248
 942:	8e bd       	out	0x2e, r24	; 46
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:528
  // Use the Tone Timer for phase correct PWM
  sbi(TCCR1A, WGM10);
 944:	8f b5       	in	r24, 0x2f	; 47
 946:	81 60       	ori	r24, 0x01	; 1
 948:	8f bd       	out	0x2f, r24	; 47
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:529
  cbi(TCCR1A, WGM11);
 94a:	8f b5       	in	r24, 0x2f	; 47
 94c:	8d 7f       	andi	r24, 0xFD	; 253
 94e:	8f bd       	out	0x2f, r24	; 47
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:530
  cbi(TCCR1B, WGM12);
 950:	8e b5       	in	r24, 0x2e	; 46
 952:	87 7f       	andi	r24, 0xF7	; 247
 954:	8e bd       	out	0x2e, r24	; 46
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:531
  cbi(TCCR1B, WGM13);
 956:	8e b5       	in	r24, 0x2e	; 46
 958:	8f 7e       	andi	r24, 0xEF	; 239
 95a:	8e bd       	out	0x2e, r24	; 46
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:532
  TCCR1B |= (ToneTimer_Prescale_Index << CS10); //set the clock
 95c:	8e b5       	in	r24, 0x2e	; 46
 95e:	83 60       	ori	r24, 0x03	; 3
 960:	8e bd       	out	0x2e, r24	; 46
init():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:893

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
  ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
 962:	86 b1       	in	r24, 0x06	; 6
 964:	88 77       	andi	r24, 0x78	; 120
 966:	86 68       	ori	r24, 0x86	; 134
 968:	86 b9       	out	0x06, r24	; 6
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/cores/tiny/wiring.c:895
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
 96a:	37 9a       	sbi	0x06, 7	; 6
begin():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:362
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void) {
  BufferIndex = 0;
 96c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:363
  BufferLength = 0;
 970:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <TwoWire::BufferLength>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:365

  transmitting = 0;
 974:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <TwoWire::transmitting>
USI_TWI_Master_Initialise():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:56
/*---------------------------------------------------------------
 USI TWI single master initialization function
---------------------------------------------------------------*/
void USI_TWI_Master_Initialise(void)
{
  PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
 978:	de 9a       	sbi	0x1b, 6	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:57
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
 97a:	dc 9a       	sbi	0x1b, 4	; 27
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:59

  DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
 97c:	d4 9a       	sbi	0x1a, 4	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:60
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
 97e:	d6 9a       	sbi	0x1a, 6	; 26
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:62

  USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	8f b9       	out	0x0f, r24	; 15
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:63
  USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
 984:	8a e2       	ldi	r24, 0x2A	; 42
 986:	8d b9       	out	0x0d, r24	; 13
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:67
          (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
          (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
          (0 << USITC);
  USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
 988:	80 ef       	ldi	r24, 0xF0	; 240
 98a:	8e b9       	out	0x0e, r24	; 14
beginTransmission():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:453
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <TwoWire::transmitting>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:455
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
 992:	90 ed       	ldi	r25, 0xD0	; 208
 994:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__data_end>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:457
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
 998:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:458
  BufferLength = BufferIndex;
 99c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <TwoWire::BufferLength>
DS3231_get_addr():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:67
  Wire.write(val);
  Wire.endTransmission();
}
uint8_t DS3231_get_addr(uint8_t addr){
  Wire.beginTransmission(DS3231_I2C_ADDR);
  Wire.write(addr);
 9a0:	8f e0       	ldi	r24, 0x0F	; 15
 9a2:	ac db       	rcall	.-2216   	; 0xfc <TwoWire::write(unsigned char) [clone .constprop.13]>
endTransmission():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:491
  }
  return 0; //success
}

uint8_t TwoWire::endTransmission(void) {
  return endTransmission(true);
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	54 de       	rcall	.-856    	; 0x650 <TwoWire::endTransmission(unsigned char) [clone .constprop.11]>
DS3231_get_addr():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:71
  Wire.endTransmission();
  uint8_t rv;
    uint8_t gotData = false;
  uint32_t start = millis(); // start timeout
 9a8:	9c dc       	rcall	.-1736   	; 0x2e2 <millis>
 9aa:	6b 01       	movw	r12, r22
 9ac:	7c 01       	movw	r14, r24
requestFrom():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:417
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
 9ae:	c1 ed       	ldi	r28, 0xD1	; 209
DS3231_get_addr():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:72
  while(millis()-start < DS3231_TRANSACTION_TIMEOUT){
 9b0:	98 dc       	rcall	.-1744   	; 0x2e2 <millis>
 9b2:	6c 19       	sub	r22, r12
 9b4:	7d 09       	sbc	r23, r13
 9b6:	8e 09       	sbc	r24, r14
 9b8:	9f 09       	sbc	r25, r15
 9ba:	64 36       	cpi	r22, 0x64	; 100
 9bc:	71 05       	cpc	r23, r1
 9be:	81 05       	cpc	r24, r1
 9c0:	91 05       	cpc	r25, r1
 9c2:	c0 f4       	brcc	.+48     	; 0x9f4 <main+0xd8>
requestFrom():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:417
 9c4:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <__data_end>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:420
  // perform blocking read into buffer
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer, quantity,
                                                         sendStop);
 9c8:	41 e0       	ldi	r20, 0x01	; 1
 9ca:	62 e0       	ldi	r22, 0x02	; 2
 9cc:	8a e6       	ldi	r24, 0x6A	; 106
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	cd dd       	rcall	.-1126   	; 0x56c <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:422
  // set rx buffer iterator vars
  BufferIndex = 1; // ignore slave address
 9d2:	91 e0       	ldi	r25, 0x01	; 1
 9d4:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:424
  // check for error
  if (ret == FALSE) {
 9d8:	81 11       	cpse	r24, r1
 9da:	08 c0       	rjmp	.+16     	; 0x9ec <main+0xd0>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:425
    BufferLength = BufferIndex;
 9dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <TwoWire::BufferLength>
DS3231_get_addr():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:77
    if (Wire.requestFrom(DS3231_I2C_ADDR, 1) == 1) {
        gotData = true;
        break;
      }
      delay(2);
 9e0:	62 e0       	ldi	r22, 0x02	; 2
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	52 dc       	rcall	.-1884   	; 0x28e <delay>
 9ea:	e2 cf       	rjmp	.-60     	; 0x9b0 <main+0x94>
requestFrom():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:428
    return 0;
  }
  BufferLength = quantity;
 9ec:	82 e0       	ldi	r24, 0x02	; 2
 9ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <TwoWire::BufferLength>
DS3231_get_addr():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:81
    }
  if (!gotData)
      return 0; // error timeout
    rv = Wire.read();
 9f2:	56 db       	rcall	.-2388   	; 0xa0 <TwoWire::read() [clone .constprop.14]>
beginTransmission():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:453
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <TwoWire::transmitting>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:455
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
 9fa:	90 ed       	ldi	r25, 0xD0	; 208
 9fc:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__data_end>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:457
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
 a00:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <TwoWire::BufferIndex>
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:458
  BufferLength = BufferIndex;
 a04:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <TwoWire::BufferLength>
DS3231_set_addr():
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:61
  sreg &= !DS3231_STATUS_EN32KHZ;
  DS3231_set_addr(DS3231_STATUS_ADDR, sreg);
}
void DS3231_set_addr(uint8_t addr, uint8_t val){
  Wire.beginTransmission(DS3231_I2C_ADDR);
  Wire.write(addr);
 a08:	8f e0       	ldi	r24, 0x0F	; 15
 a0a:	78 db       	rcall	.-2320   	; 0xfc <TwoWire::write(unsigned char) [clone .constprop.13]>
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:62
  Wire.write(val);
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	76 db       	rcall	.-2324   	; 0xfc <TwoWire::write(unsigned char) [clone .constprop.13]>
endTransmission():
/home/lukilukeskywalker/.arduino15/packages/ATTinyCore/hardware/avr/1.3.3/libraries/Wire/src/Wire.cpp:491
  }
  return 0; //success
}

uint8_t TwoWire::endTransmission(void) {
  return endTransmission(true);
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	1e de       	rcall	.-964    	; 0x650 <TwoWire::endTransmission(unsigned char) [clone .constprop.11]>
setup():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:39
//  }
  // put your setup code here, to run once:
  //wdt_disable();
  Wire.begin();
  DS3231_init();
  DS3231_get_time(&time);
 a14:	3d de       	rcall	.-902    	; 0x690 <DS3231_get_time(time_struct*) [clone .constprop.1]>
 a16:	20 e6       	ldi	r18, 0x60	; 96
 a18:	c2 2e       	mov	r12, r18
 a1a:	20 e0       	ldi	r18, 0x00	; 0
 a1c:	d2 2e       	mov	r13, r18
main():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:40
  for (int i=0; i<5; i++){
 a1e:	d0 e0       	ldi	r29, 0x00	; 0
 a20:	c0 e0       	ldi	r28, 0x00	; 0
setup():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:41
    pinMode(led_pins[i], OUTPUT);
 a22:	f6 01       	movw	r30, r12
 a24:	f0 80       	ld	r15, Z
 a26:	f2 e0       	ldi	r31, 0x02	; 2
 a28:	cf 0e       	add	r12, r31
 a2a:	d1 1c       	adc	r13, r1
 a2c:	61 e0       	ldi	r22, 0x01	; 1
 a2e:	8f 2d       	mov	r24, r15
 a30:	d5 db       	rcall	.-2134   	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:42
    digitalWrite(led_pins[i], HIGH);
 a32:	61 e0       	ldi	r22, 0x01	; 1
 a34:	8f 2d       	mov	r24, r15
 a36:	95 db       	rcall	.-2262   	; 0x162 <digitalWrite>
 a38:	90 e6       	ldi	r25, 0x60	; 96
 a3a:	a9 2e       	mov	r10, r25
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	b9 2e       	mov	r11, r25
main():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:43
    for(int j=0; j<5; j++){
 a40:	10 e0       	ldi	r17, 0x00	; 0
 a42:	00 e0       	ldi	r16, 0x00	; 0
setup():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:44
      if(j!=i){
 a44:	0c 17       	cp	r16, r28
 a46:	1d 07       	cpc	r17, r29
 a48:	81 f0       	breq	.+32     	; 0xa6a <main+0x14e>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:47
        //Serial.print(String("Output High: ")+ i);
        //Serial.println(String(" Output Low: ")+ j);
         pinMode(led_pins[j], OUTPUT);
 a4a:	f5 01       	movw	r30, r10
 a4c:	e0 80       	ld	r14, Z
 a4e:	61 e0       	ldi	r22, 0x01	; 1
 a50:	8e 2d       	mov	r24, r14
 a52:	c4 db       	rcall	.-2168   	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:48
         digitalWrite(led_pins[j], LOW);
 a54:	60 e0       	ldi	r22, 0x00	; 0
 a56:	8e 2d       	mov	r24, r14
 a58:	84 db       	rcall	.-2296   	; 0x162 <digitalWrite>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:49
         delay(250);
 a5a:	6a ef       	ldi	r22, 0xFA	; 250
 a5c:	70 e0       	ldi	r23, 0x00	; 0
 a5e:	80 e0       	ldi	r24, 0x00	; 0
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	15 dc       	rcall	.-2006   	; 0x28e <delay>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:50
         pinMode(led_pins[j], INPUT);
 a64:	60 e0       	ldi	r22, 0x00	; 0
 a66:	8e 2d       	mov	r24, r14
 a68:	b9 db       	rcall	.-2190   	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:43
  DS3231_init();
  DS3231_get_time(&time);
  for (int i=0; i<5; i++){
    pinMode(led_pins[i], OUTPUT);
    digitalWrite(led_pins[i], HIGH);
    for(int j=0; j<5; j++){
 a6a:	0f 5f       	subi	r16, 0xFF	; 255
 a6c:	1f 4f       	sbci	r17, 0xFF	; 255
 a6e:	f2 e0       	ldi	r31, 0x02	; 2
 a70:	af 0e       	add	r10, r31
 a72:	b1 1c       	adc	r11, r1
 a74:	05 30       	cpi	r16, 0x05	; 5
 a76:	11 05       	cpc	r17, r1
 a78:	29 f7       	brne	.-54     	; 0xa44 <main+0x128>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:53
         digitalWrite(led_pins[j], LOW);
         delay(250);
         pinMode(led_pins[j], INPUT);
      }
    }
    pinMode(led_pins[i], INPUT);
 a7a:	60 e0       	ldi	r22, 0x00	; 0
 a7c:	8f 2d       	mov	r24, r15
 a7e:	ae db       	rcall	.-2212   	; 0x1dc <pinMode>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:40
  // put your setup code here, to run once:
  //wdt_disable();
  Wire.begin();
  DS3231_init();
  DS3231_get_time(&time);
  for (int i=0; i<5; i++){
 a80:	21 96       	adiw	r28, 0x01	; 1
 a82:	c5 30       	cpi	r28, 0x05	; 5
 a84:	d1 05       	cpc	r29, r1
 a86:	69 f6       	brne	.-102    	; 0xa22 <main+0x106>
loop():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:165
void loop() {
  //A ver... Los pines de los leds son el PFO, PF1, PF4, PF5, PF6. Con solo 5 pines podemos charliplexar 20 Leds. Ahora solo hay que conseguir escribir el codigo.
  //Con el registrp DDX, en este caso DDF, seleccionamos si deseamos el pin en estado salida o entrada. Si queremos que tenga una alta impedancia, lo seleccionamos a entrada, poniendolo
  //en  0, o en 1 si lo queremos como salida. 
  //En el registro PORTX, selecionamos el estado. Osea HIGH o LOW
  if(time.minute%10==0){
 a88:	ca e0       	ldi	r28, 0x0A	; 10
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:171
    DS3231_get_time(&time);
  }
  printHoras(time.hour, Horas_pins, false, true);
  printHoras(time.minute, Agrupacion_M, true, false);
  printHoras(time.second, Agrupacion_S, false, false);
  if(millis()%1000){
 a8a:	88 ee       	ldi	r24, 0xE8	; 232
 a8c:	c8 2e       	mov	r12, r24
 a8e:	83 e0       	ldi	r24, 0x03	; 3
 a90:	d8 2e       	mov	r13, r24
 a92:	e1 2c       	mov	r14, r1
 a94:	f1 2c       	mov	r15, r1
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:165
void loop() {
  //A ver... Los pines de los leds son el PFO, PF1, PF4, PF5, PF6. Con solo 5 pines podemos charliplexar 20 Leds. Ahora solo hay que conseguir escribir el codigo.
  //Con el registrp DDX, en este caso DDF, seleccionamos si deseamos el pin en estado salida o entrada. Si queremos que tenga una alta impedancia, lo seleccionamos a entrada, poniendolo
  //en  0, o en 1 si lo queremos como salida. 
  //En el registro PORTX, selecionamos el estado. Osea HIGH o LOW
  if(time.minute%10==0){
 a96:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <time+0x1>
 a9a:	6c 2f       	mov	r22, r28
 a9c:	76 d0       	rcall	.+236    	; 0xb8a <__udivmodqi4>
 a9e:	91 11       	cpse	r25, r1
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <main+0x188>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:166
    DS3231_get_time(&time);
 aa2:	f6 dd       	rcall	.-1044   	; 0x690 <DS3231_get_time(time_struct*) [clone .constprop.1]>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:168
  }
  printHoras(time.hour, Horas_pins, false, true);
 aa4:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <time>
 aa8:	21 e0       	ldi	r18, 0x01	; 1
 aaa:	40 e0       	ldi	r20, 0x00	; 0
 aac:	63 ea       	ldi	r22, 0xA3	; 163
 aae:	70 e0       	ldi	r23, 0x00	; 0
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	35 dc       	rcall	.-1942   	; 0x31e <printHoras(int, int*, bool, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:169
  printHoras(time.minute, Agrupacion_M, true, false);
 ab4:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <time+0x1>
 ab8:	20 e0       	ldi	r18, 0x00	; 0
 aba:	41 e0       	ldi	r20, 0x01	; 1
 abc:	67 e9       	ldi	r22, 0x97	; 151
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	2d dc       	rcall	.-1958   	; 0x31e <printHoras(int, int*, bool, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:170
  printHoras(time.second, Agrupacion_S, false, false);
 ac4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <time+0x2>
 ac8:	20 e0       	ldi	r18, 0x00	; 0
 aca:	40 e0       	ldi	r20, 0x00	; 0
 acc:	6b e8       	ldi	r22, 0x8B	; 139
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	25 dc       	rcall	.-1974   	; 0x31e <printHoras(int, int*, bool, bool)>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:171
  if(millis()%1000){
 ad4:	06 dc       	rcall	.-2036   	; 0x2e2 <millis>
 ad6:	a7 01       	movw	r20, r14
 ad8:	96 01       	movw	r18, r12
 ada:	76 d0       	rcall	.+236    	; 0xbc8 <__udivmodsi4>
 adc:	67 2b       	or	r22, r23
 ade:	68 2b       	or	r22, r24
 ae0:	69 2b       	or	r22, r25
 ae2:	c9 f2       	breq	.-78     	; 0xa96 <main+0x17a>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:172
    time.second++;
 ae4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <time+0x2>
 ae8:	8f 5f       	subi	r24, 0xFF	; 255
 aea:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <time+0x2>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:173
    if (time.second ==60){
 aee:	8c 33       	cpi	r24, 0x3C	; 60
 af0:	91 f6       	brne	.-92     	; 0xa96 <main+0x17a>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:174
      time.second=0;
 af2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <time+0x2>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:175
      time.minute++;
 af6:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <time+0x1>
 afa:	8f 5f       	subi	r24, 0xFF	; 255
 afc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <time+0x1>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:176
      if(time.minute==60){
 b00:	8c 33       	cpi	r24, 0x3C	; 60
 b02:	49 f6       	brne	.-110    	; 0xa96 <main+0x17a>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:177
        time.minute=0;
 b04:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <time+0x1>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:178
        time.hour++;
 b08:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <time>
 b0c:	8f 5f       	subi	r24, 0xFF	; 255
 b0e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <time>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:179
        if(time.hour==24){
 b12:	88 31       	cpi	r24, 0x18	; 24
 b14:	09 f0       	breq	.+2      	; 0xb18 <main+0x1fc>
 b16:	bf cf       	rjmp	.-130    	; 0xa96 <main+0x17a>
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:180
          time.hour=0;
 b18:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <time>
 b1c:	bc cf       	rjmp	.-136    	; 0xa96 <main+0x17a>

00000b1e <_GLOBAL__sub_I_led_pins>:
_GLOBAL__sub_I_led_pins():
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:16
//int Agrupacion_M[]={A5, A2, A4, A5, A4, A2};
//int Agrupacion_S[]={A5, A2, A3, A3, A2, A1};
#elif defined(__AVR_ATtiny84__)
int led_pins[]={0, 1, 2, 3, 5};  // P1, P2, P3, P4, P5 //Attiny84 Positions PORTA0, PORTA1, PORTA2, PORTA3, PORTA5
#endif
int Horas_pins[]={led_pins[0], led_pins[1], led_pins[2]};
 b1e:	e3 ea       	ldi	r30, 0xA3	; 163
 b20:	f0 e0       	ldi	r31, 0x00	; 0
 b22:	11 82       	std	Z+1, r1	; 0x01
 b24:	10 82       	st	Z, r1
 b26:	41 e0       	ldi	r20, 0x01	; 1
 b28:	50 e0       	ldi	r21, 0x00	; 0
 b2a:	53 83       	std	Z+3, r21	; 0x03
 b2c:	42 83       	std	Z+2, r20	; 0x02
 b2e:	22 e0       	ldi	r18, 0x02	; 2
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	35 83       	std	Z+5, r19	; 0x05
 b34:	24 83       	std	Z+4, r18	; 0x04
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:20
int Minutos_pins[]={led_pins[0], led_pins[1], led_pins[4]};
int Segundos_pins[]={led_pins[2], led_pins[3], led_pins[4]};
int Agrupacion_H[]={led_pins[0],led_pins[1],led_pins[2],led_pins[0],led_pins[1],led_pins[2]};
int Agrupacion_M[]={led_pins[0],led_pins[3],led_pins[1], led_pins[0], led_pins[1], led_pins[4]};
 b36:	e7 e9       	ldi	r30, 0x97	; 151
 b38:	f0 e0       	ldi	r31, 0x00	; 0
 b3a:	11 82       	std	Z+1, r1	; 0x01
 b3c:	10 82       	st	Z, r1
 b3e:	83 e0       	ldi	r24, 0x03	; 3
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	93 83       	std	Z+3, r25	; 0x03
 b44:	82 83       	std	Z+2, r24	; 0x02
 b46:	55 83       	std	Z+5, r21	; 0x05
 b48:	44 83       	std	Z+4, r20	; 0x04
 b4a:	17 82       	std	Z+7, r1	; 0x07
 b4c:	16 82       	std	Z+6, r1	; 0x06
 b4e:	51 87       	std	Z+9, r21	; 0x09
 b50:	40 87       	std	Z+8, r20	; 0x08
 b52:	45 e0       	ldi	r20, 0x05	; 5
 b54:	50 e0       	ldi	r21, 0x00	; 0
 b56:	53 87       	std	Z+11, r21	; 0x0b
 b58:	42 87       	std	Z+10, r20	; 0x0a
/home/lukilukeskywalker/Arduino/Binary_Clock/Binary_Clock.ino:21
int Agrupacion_S[]={led_pins[0],led_pins[3],led_pins[2],led_pins[2],led_pins[3],led_pins[4]};
 b5a:	eb e8       	ldi	r30, 0x8B	; 139
 b5c:	f0 e0       	ldi	r31, 0x00	; 0
 b5e:	11 82       	std	Z+1, r1	; 0x01
 b60:	10 82       	st	Z, r1
 b62:	93 83       	std	Z+3, r25	; 0x03
 b64:	82 83       	std	Z+2, r24	; 0x02
 b66:	35 83       	std	Z+5, r19	; 0x05
 b68:	24 83       	std	Z+4, r18	; 0x04
 b6a:	37 83       	std	Z+7, r19	; 0x07
 b6c:	26 83       	std	Z+6, r18	; 0x06
 b6e:	91 87       	std	Z+9, r25	; 0x09
 b70:	80 87       	std	Z+8, r24	; 0x08
 b72:	53 87       	std	Z+11, r21	; 0x0b
 b74:	42 87       	std	Z+10, r20	; 0x0a
/home/lukilukeskywalker/Arduino/Binary_Clock/ds3231.ino:86
    rv = Wire.read();
    return rv;
}
byte bcdtodec(byte val){
  return((val/16*10)+(val%10));
}
 b76:	08 95       	ret

00000b78 <__mulqi3>:
__mulqi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
 b78:	00 24       	eor	r0, r0

00000b7a <__mulqi3_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
 b7a:	80 fd       	sbrc	r24, 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
 b7c:	06 0e       	add	r0, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
 b7e:	66 0f       	add	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
 b80:	11 f0       	breq	.+4      	; 0xb86 <__mulqi3_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
 b82:	86 95       	lsr	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
 b84:	d1 f7       	brne	.-12     	; 0xb7a <__mulqi3_loop>

00000b86 <__mulqi3_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
 b86:	80 2d       	mov	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
 b88:	08 95       	ret

00000b8a <__udivmodqi4>:
__udivmodqi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1346
 b8a:	99 1b       	sub	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1347
 b8c:	79 e0       	ldi	r23, 0x09	; 9
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1348
 b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__udivmodqi4_ep>

00000b90 <__udivmodqi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1350
 b90:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1351
 b92:	96 17       	cp	r25, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1352
 b94:	08 f0       	brcs	.+2      	; 0xb98 <__udivmodqi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1353
 b96:	96 1b       	sub	r25, r22

00000b98 <__udivmodqi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1355
 b98:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1356
 b9a:	7a 95       	dec	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1357
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__udivmodqi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1358
 b9e:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1360
 ba0:	08 95       	ret

00000ba2 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
 ba2:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
 ba4:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
 ba6:	16 f4       	brtc	.+4      	; 0xbac <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
 ba8:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
 baa:	06 d0       	rcall	.+12     	; 0xbb8 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
 bac:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
 bae:	08 d0       	rcall	.+16     	; 0xbc0 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
 bb0:	2d d0       	rcall	.+90     	; 0xc0c <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
 bb2:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
 bb4:	05 d0       	rcall	.+10     	; 0xbc0 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
 bb6:	3e f4       	brtc	.+14     	; 0xbc6 <__divmodhi4_exit>

00000bb8 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
 bb8:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
 bba:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
 bbe:	08 95       	ret

00000bc0 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
 bc0:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
 bc2:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
 bc4:	7f 4f       	sbci	r23, 0xFF	; 255

00000bc6 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
 bc6:	08 95       	ret

00000bc8 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
 bc8:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
 bca:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
 bcc:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
 bce:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
 bd0:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
 bd2:	0d c0       	rjmp	.+26     	; 0xbee <__udivmodsi4_ep>

00000bd4 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
 bd4:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
 bd6:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
 bd8:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
 bda:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
 bdc:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
 bde:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
 be0:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
 be2:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
 be4:	20 f0       	brcs	.+8      	; 0xbee <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
 be6:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
 be8:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
 bea:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
 bec:	f5 0b       	sbc	r31, r21

00000bee <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
 bee:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
 bf0:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
 bf2:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
 bf4:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
 bf6:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
 bf8:	69 f7       	brne	.-38     	; 0xbd4 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
 bfa:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
 bfc:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
 bfe:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
 c00:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
 c02:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
 c04:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
 c06:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
 c08:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
 c0a:	08 95       	ret

00000c0c <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
 c0c:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
 c0e:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
 c10:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
 c12:	07 c0       	rjmp	.+14     	; 0xc22 <__udivmodhi4_ep>

00000c14 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
 c14:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
 c16:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
 c18:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
 c1a:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
 c1c:	10 f0       	brcs	.+4      	; 0xc22 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
 c1e:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
 c20:	b7 0b       	sbc	r27, r23

00000c22 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
 c22:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
 c24:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
 c26:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
 c28:	a9 f7       	brne	.-22     	; 0xc14 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
 c2a:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
 c2c:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
 c2e:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
 c30:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
 c32:	08 95       	ret

00000c34 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 c34:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 c36:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 c38:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 c3a:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 c3c:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 c3e:	09 94       	ijmp

00000c40 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 c40:	f8 94       	cli

00000c42 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 c42:	ff cf       	rjmp	.-2      	; 0xc42 <__stop_program>
